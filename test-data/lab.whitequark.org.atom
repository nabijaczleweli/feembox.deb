<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="https://lab.whitequark.org/">
  <id>https://lab.whitequark.org/</id>
  <title>whitequark's lab notebook</title>
  <updated>2020-04-06T17:25:03Z</updated>
  <link rel="alternate" href="https://lab.whitequark.org/" type="text/html"/>
  <link rel="self" href="https://lab.whitequark.org/atom.xml" type="application/atom+xml"/>
  <author>
    <name>whitequark</name>
    <uri>https://lab.whitequark.org/</uri>
  </author>
  <entry>
    <id>tag:lab.whitequark.org,2020-04-06:/notes/2020-04-06/minimizing-logic-expressions/</id>
    <title type="html">Minimizing logic expressions</title>
    <published>2020-04-06T17:25:03Z</published>
    <updated>2020-04-06T17:25:03Z</updated>
    <link rel="alternate" href="https://lab.whitequark.org/notes/2020-04-06/minimizing-logic-expressions/" type="text/html"/>
    <content type="html">&lt;p&gt;While working on reverse-engineering the Microchip ATF15xx CPLD family, I found myself deriving minimal logic functions from a truth table. This useful because while it is easy to sample all possible states of a black box combinatorial function using e.g. &lt;a href="https://en.wikipedia.org/wiki/Boundary_scan"&gt;boundary scan&lt;/a&gt;, these truth tables are unwieldy and don’t provide much insight into the hardware. While a minimal function with the same truth table would not necessarily be &lt;em&gt;the&lt;/em&gt; function implemented by the hardware (which may have hidden variables, or simply use a larger equivalent function that is more convenient to implement), deriving one still provides great insight. In this note I explore this process.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;My chosen approach (thanks to &lt;a href="https://www.cs.utah.edu/~regehr/"&gt;John Regehr&lt;/a&gt; for the &lt;a href="https://twitter.com/johnregehr/status/1212563858524499968"&gt;suggestion&lt;/a&gt;) I got for &lt;a href="/notes/2020-04-06/synthesizing-optimal-8051-code/"&gt;an earlier project&lt;/a&gt; is to implement an interpreter for a simple logic expression abstract syntax tree in &lt;a href="https://racket-lang.org"&gt;Racket&lt;/a&gt; and then use &lt;a href="https://emina.github.io/rosette/"&gt;Rosette&lt;/a&gt; to translate assertions about the results of interpreting an arbitrary logic expression, as well as a cost function, into a query for an &lt;a href="https://en.wikipedia.org/wiki/Satisfiability_modulo_theories"&gt;SMT solver&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Although I could use an off-the-shelf logic minimizer here (like &lt;a href="https://ptolemy.berkeley.edu/projects/embedded/pubs/downloads/espresso/"&gt;Espresso&lt;/a&gt;), most logic minimizers solve a different problem: quickly translating large designs to simple netlists. However, I would like to have a complex output netlist: the ATF15xx CPLDs have a hardware XOR gate that I would like the minimizer to infer on its own. On the other hand, I don’t really care about the runtime of the minimizer as long as it’s on the order of minutes to hours. Rosette’s flexibility is a perfect match for this task.&lt;/p&gt;

&lt;p&gt;The following code demonstrates the approach and its ability to derive a XOR gate from3 the input expression. It can be easily modified for a particular application by extending (or reducing, e.g. for translation to an &lt;a href="https://en.wikipedia.org/wiki/And-inverter_graph"&gt;and-inverter graph&lt;/a&gt;) the logic language, or altering the cost function.&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;minlogic.rkt (&lt;a href="/files/minlogic.rkt"&gt;download&lt;/a&gt;)&lt;/figcaption&gt;&lt;pre&gt;&lt;code class="language-racket"&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;
&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
&lt;/pre&gt;&lt;/td&gt;
&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="nv"&gt;lang&lt;/span&gt; &lt;span class="nv"&gt;rosette/safe&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="nv"&gt;rosette/lib/angelic&lt;/span&gt;
         &lt;span class="nv"&gt;rosette/lib/match&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;^^&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;!&lt;/span&gt; &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;!&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;struct&lt;/span&gt; &lt;span class="nv"&gt;lnot&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="nt"&gt;#:transparent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;struct&lt;/span&gt; &lt;span class="nv"&gt;land&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;#:transparent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;struct&lt;/span&gt; &lt;span class="nv"&gt;lor&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;#:transparent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;struct&lt;/span&gt; &lt;span class="nv"&gt;lxor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;#:transparent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;struct&lt;/span&gt; &lt;span class="nv"&gt;lvar&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="nt"&gt;#:transparent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;struct&lt;/span&gt; &lt;span class="nv"&gt;llit&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="nt"&gt;#:transparent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ldump&lt;/span&gt; &lt;span class="nv"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;match&lt;/span&gt; &lt;span class="nv"&gt;e&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;lnot&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;!&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ldump&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;land&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ldump&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ldump&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;lor&lt;/span&gt;  &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\|\|&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ldump&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ldump&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;lxor&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;^^&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ldump&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ldump&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;lvar&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;llit&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;leval&lt;/span&gt; &lt;span class="nv"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;match&lt;/span&gt; &lt;span class="nv"&gt;e&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;lnot&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;!&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;leval&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;land&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;leval&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;leval&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;lor&lt;/span&gt;  &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;leval&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;leval&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;lxor&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;^^&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;leval&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;leval&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;lvar&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;llit&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;lcost&lt;/span&gt; &lt;span class="nv"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;match&lt;/span&gt; &lt;span class="nv"&gt;e&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;lnot&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;lcost&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;land&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;lcost&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;lcost&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;lor&lt;/span&gt;  &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;lcost&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;lcost&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;lxor&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;lcost&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;lcost&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;lvar&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;llit&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;??lexpr&lt;/span&gt; &lt;span class="nv"&gt;terminals&lt;/span&gt; &lt;span class="nt"&gt;#:depth&lt;/span&gt; &lt;span class="nv"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;apply&lt;/span&gt; &lt;span class="nv"&gt;choose*&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nv"&gt;depth&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;terminals&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;a&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;??lexpr&lt;/span&gt; &lt;span class="nv"&gt;terminals&lt;/span&gt; &lt;span class="nt"&gt;#:depth&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;depth&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;b&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;??lexpr&lt;/span&gt; &lt;span class="nv"&gt;terminals&lt;/span&gt; &lt;span class="nt"&gt;#:depth&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;depth&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))]&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;append&lt;/span&gt; &lt;span class="nv"&gt;terminals&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;lnot&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;land&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;lor&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;lxor&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)))))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;lmincost&lt;/span&gt; &lt;span class="nt"&gt;#:forall&lt;/span&gt; &lt;span class="nv"&gt;inputs&lt;/span&gt; &lt;span class="nt"&gt;#:tactic&lt;/span&gt; &lt;span class="nv"&gt;template&lt;/span&gt; &lt;span class="nt"&gt;#:equiv&lt;/span&gt; &lt;span class="nv"&gt;behavior&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;optimize&lt;/span&gt;
      &lt;span class="nt"&gt;#:minimize&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;lcost&lt;/span&gt; &lt;span class="nv"&gt;template&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="nt"&gt;#:guarantee&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;forall&lt;/span&gt; &lt;span class="nv"&gt;inputs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;equal?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;leval&lt;/span&gt; &lt;span class="nv"&gt;template&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;behavior&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;unsat?&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;evaluate&lt;/span&gt; &lt;span class="nv"&gt;template&lt;/span&gt; &lt;span class="nv"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;define-symbolic&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="nv"&gt;boolean?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;lmincost&lt;/span&gt;
    &lt;span class="nt"&gt;#:forall&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nt"&gt;#:tactic&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;??lexpr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;lvar&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;lvar&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;lvar&lt;/span&gt; &lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;llit&lt;/span&gt; &lt;span class="no"&gt;#f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nt"&gt;#:depth&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nt"&gt;#:equiv&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;!&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;!&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;!&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;!&lt;/span&gt; &lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)))))))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;displayln&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ldump&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;; (! (^^ (&amp;amp;&amp;amp; c b) a))&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</content>
    <summary type="html">&lt;p&gt;While working on reverse-engineering the Microchip ATF15xx CPLD family, I found myself deriving minimal logic functions from a truth table. This useful because while it is easy to sample all possible states of a black box combinatorial function using e.g. &lt;a href="https://en.wikipedia.org/wiki/Boundary_scan"&gt;boundary scan&lt;/a&gt;, these truth tables are unwieldy and don’t provide much insight into the hardware. While a minimal function with the same truth table would not necessarily be &lt;em&gt;the&lt;/em&gt; function implemented by the hardware (which may have hidden variables, or simply use a larger equivalent function that is more convenient to implement), deriving one still provides great insight. In this note I explore this process.&lt;/p&gt;

</summary>
  </entry>
  <entry>
    <id>tag:lab.whitequark.org,2020-04-06:/notes/2020-04-06/synthesizing-optimal-8051-code/</id>
    <title type="html">Synthesizing optimal 8051 code</title>
    <published>2020-04-06T16:44:20Z</published>
    <updated>2020-04-06T16:44:20Z</updated>
    <link rel="alternate" href="https://lab.whitequark.org/notes/2020-04-06/synthesizing-optimal-8051-code/" type="text/html"/>
    <content type="html">&lt;p&gt;While working on an application targeting Nordic nRF24LE1, a wireless SoC with a fairly slow 8051 core, I was wondering if I can have fast, or at least not unusably slow, cryptography. Most cryptographic algorithms involve wide rotates, and the 8051 only has instructions for rotating a 8-bit accumulator by one bit at a time. In this note I explore deriving optimal code for rotating values in registers (that may be bigger than 8 bits) by multiple bits.&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul id="markdown-toc"&gt;
  &lt;li&gt;&lt;a href="#introduction" id="markdown-toc-introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#code-generator" id="markdown-toc-code-generator"&gt;Code generator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
&lt;a href="#results" id="markdown-toc-results"&gt;Results&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#bit-rotates" id="markdown-toc-bit-rotates"&gt;8-bit rotates&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#bit-rotates-1" id="markdown-toc-bit-rotates-1"&gt;16-bit rotates&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;

&lt;p&gt;My chosen approach (thanks to &lt;a href="https://www.cs.utah.edu/~regehr/"&gt;John Regehr&lt;/a&gt; for the &lt;a href="https://twitter.com/johnregehr/status/1212563858524499968"&gt;suggestion&lt;/a&gt;) is to implement an interpreter for an abstract 8051 assembly representation in &lt;a href="https://racket-lang.org"&gt;Racket&lt;/a&gt; and then use &lt;a href="https://emina.github.io/rosette/"&gt;Rosette&lt;/a&gt; to translate assertions about the results of interpreting an arbitrary piece of code into a query for an &lt;a href="https://en.wikipedia.org/wiki/Satisfiability_modulo_theories"&gt;SMT solver&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Rosette greatly simplifies this task because it lets me avoid learning anything about SMT solvers, and only requires me to understand the constraints of its symbolic execution approach. (Only a small subset of Racket is safe to use in Rosette, and functions outside of that subset are hard to use correctly without an in-depth understaning of how Rosette works.)&lt;/p&gt;

&lt;h1 id="code-generator"&gt;Code generator&lt;/h1&gt;

&lt;p&gt;The following code generates all possible optimal (more on that below) 8-bit and 16-bit rotates. It uses a rather hacky and complicated scheme where it runs several solvers in parallel, one per CPU, each aiming for a particular fixed number of instructions, and then picks the smallest result as the solvers finish. This is because at the time of writing it, I did not understand that Rosette allows optimizing exists-forall problems. (It is quite easy to do so, as I describe &lt;a href="/notes/2020-04-06/minimizing-logic-expressions/"&gt;in a later note&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;However, that turned out to be a blessing in disguise; when writing this note, I &lt;a href="/files/synth51/synth51-broken.rkt"&gt;rewrote the query as an optimization problem&lt;/a&gt; for the solver, and it doesn’t seem like that would work for this use case. First, of the solvers that can be used by Rosette, only Z3 supports quantified formulas, whereas Boolector had the best performance with the simpler queries. Second, even for very small programs (such as 8-bit rotates, which all fit in 4 instructions, and even restricting the usable registers to 2 out of 8), the memory footprint of Z3 grows extremely quickly, and I always ran out of memory before getting a solution.&lt;/p&gt;

&lt;p&gt;By “optimal” here I mean “optimal within the limited model being used”, of course. The model I’m using specifically omits any memory access (preventing the use of the &lt;code&gt;XCHD&lt;/code&gt; instruction among other things), and in general has a very limited number of instructions to make solver runtime manageable. It is possible (but unlikely) that some of the instructions missing in the model but present in every 8051 CPU provide a faster way to do rotates. It is possible (and fairly likely) that your specific flavor of 8051 CPU provides a faster way to do rotates that involves memory-mapped I/O; indeed, nRF24LE1 does, but I was interested in more portable code.&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;synth51.rkt (&lt;a href="/files/synth51/synth51.rkt"&gt;download&lt;/a&gt;)&lt;/figcaption&gt;&lt;pre&gt;&lt;code class="language-racket"&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;
&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
&lt;/pre&gt;&lt;/td&gt;
&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="nv"&gt;lang&lt;/span&gt; &lt;span class="nv"&gt;rosette/safe&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;only-in&lt;/span&gt; &lt;span class="nv"&gt;racket&lt;/span&gt; &lt;span class="nv"&gt;hash&lt;/span&gt; &lt;span class="nv"&gt;in-range&lt;/span&gt; &lt;span class="nv"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;for/list&lt;/span&gt; &lt;span class="nv"&gt;with-handlers&lt;/span&gt; &lt;span class="nv"&gt;flush-output&lt;/span&gt;
                  &lt;span class="nv"&gt;thread&lt;/span&gt; &lt;span class="nv"&gt;thread-wait&lt;/span&gt; &lt;span class="nv"&gt;break-thread&lt;/span&gt; &lt;span class="nv"&gt;exn:break?&lt;/span&gt;
                  &lt;span class="nv"&gt;make-semaphore&lt;/span&gt; &lt;span class="nv"&gt;semaphore-wait&lt;/span&gt; &lt;span class="nv"&gt;semaphore-post&lt;/span&gt; &lt;span class="nv"&gt;call-with-semaphore/enable-break&lt;/span&gt;
                  &lt;span class="nv"&gt;processor-count&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="nv"&gt;rosette/solver/smt/z3&lt;/span&gt;
         &lt;span class="nv"&gt;rosette/solver/smt/boolector&lt;/span&gt;
         &lt;span class="nv"&gt;rosette/solver/smt/yices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;;(current-solver (z3 #:logic 'QF_BV #:options (hash&lt;/span&gt;
&lt;span class="c1"&gt;;   ':parallel.enable 'true&lt;/span&gt;
&lt;span class="c1"&gt;;   ':parallel.threads.max 4)))&lt;/span&gt;
&lt;span class="c1"&gt;;(current-solver (yices #:logic 'QF_BV))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;current-solver&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;boolector&lt;/span&gt; &lt;span class="nt"&gt;#:logic&lt;/span&gt; &lt;span class="ss"&gt;'QF_BV&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="nv"&gt;rosette/lib/angelic&lt;/span&gt;
         &lt;span class="nv"&gt;rosette/lib/match&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;current-bitwidth&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;; bit operations&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;rotate-right&lt;/span&gt; &lt;span class="nv"&gt;s&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;cond&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nb"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;else&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;extract&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;extract&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;s&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))]))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;rotate-left&lt;/span&gt; &lt;span class="nv"&gt;s&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;cond&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nb"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;else&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;extract&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;s&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;extract&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;s&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;s&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))]))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;replace-bit&lt;/span&gt; &lt;span class="nv"&gt;s&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bvshl&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bv&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;integer-&amp;gt;bitvector&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;cond&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;bveq&lt;/span&gt; &lt;span class="nv"&gt;y&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bv&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bvand&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bvnot&lt;/span&gt; &lt;span class="nv"&gt;m&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;bveq&lt;/span&gt; &lt;span class="nv"&gt;y&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bv&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bvor&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="nv"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;else&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;assert&lt;/span&gt; &lt;span class="no"&gt;#f&lt;/span&gt;&lt;span class="p"&gt;)]))&lt;/span&gt;

&lt;span class="c1"&gt;; CPU state&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;struct&lt;/span&gt; &lt;span class="nv"&gt;state&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;A&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt; &lt;span class="nv"&gt;Rn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;#:mutable&lt;/span&gt; &lt;span class="nt"&gt;#:transparent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-Rn-ref&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;vector-ref&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-Rn&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-Rn-set!&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;vector-set!&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-Rn&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-R0&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-Rn-ref&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-R1&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-Rn-ref&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-R2&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-Rn-ref&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-R3&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-Rn-ref&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-R4&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-Rn-ref&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-R5&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-Rn-ref&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-R6&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-Rn-ref&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-R7&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-Rn-ref&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;define-symbolic&lt;/span&gt; &lt;span class="nv"&gt;A&lt;/span&gt; &lt;span class="nv"&gt;R0&lt;/span&gt; &lt;span class="nv"&gt;R1&lt;/span&gt; &lt;span class="nv"&gt;R2&lt;/span&gt; &lt;span class="nv"&gt;R3&lt;/span&gt; &lt;span class="nv"&gt;R4&lt;/span&gt; &lt;span class="nv"&gt;R5&lt;/span&gt; &lt;span class="nv"&gt;R6&lt;/span&gt; &lt;span class="nv"&gt;R7&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bitvector&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;define-symbolic&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bitvector&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;make-state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state&lt;/span&gt; &lt;span class="nv"&gt;A&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;vector&lt;/span&gt; &lt;span class="nv"&gt;R0&lt;/span&gt; &lt;span class="nv"&gt;R1&lt;/span&gt; &lt;span class="nv"&gt;R2&lt;/span&gt; &lt;span class="nv"&gt;R3&lt;/span&gt; &lt;span class="nv"&gt;R4&lt;/span&gt; &lt;span class="nv"&gt;R5&lt;/span&gt; &lt;span class="nv"&gt;R6&lt;/span&gt; &lt;span class="nv"&gt;R7&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;; instructions&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;struct&lt;/span&gt; &lt;span class="nv"&gt;MOV-A-Rn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;#:transparent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;struct&lt;/span&gt; &lt;span class="nv"&gt;MOV-Rn-A&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;#:transparent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;struct&lt;/span&gt; &lt;span class="nv"&gt;ANL-A-Rn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;#:transparent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;struct&lt;/span&gt; &lt;span class="nv"&gt;ORL-A-Rn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;#:transparent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;struct&lt;/span&gt; &lt;span class="nv"&gt;XRL-A-Rn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;#:transparent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;struct&lt;/span&gt; &lt;span class="nv"&gt;XCH-A-Rn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;#:transparent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;struct&lt;/span&gt; &lt;span class="nv"&gt;MOV-A-i&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;#:transparent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;struct&lt;/span&gt; &lt;span class="nv"&gt;ANL-A-i&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;#:transparent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;struct&lt;/span&gt; &lt;span class="nv"&gt;ORL-A-i&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;#:transparent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;struct&lt;/span&gt; &lt;span class="nv"&gt;SWAP-A&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nt"&gt;#:transparent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;struct&lt;/span&gt; &lt;span class="nv"&gt;CLR-C&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nt"&gt;#:transparent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;struct&lt;/span&gt; &lt;span class="nv"&gt;MOV-C-An&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;#:transparent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;struct&lt;/span&gt; &lt;span class="nv"&gt;MOV-An-C&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;#:transparent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;struct&lt;/span&gt; &lt;span class="nv"&gt;RLC-A&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nt"&gt;#:transparent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;struct&lt;/span&gt; &lt;span class="nv"&gt;RRC-A&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nt"&gt;#:transparent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;struct&lt;/span&gt; &lt;span class="nv"&gt;RL-A&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nt"&gt;#:transparent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;struct&lt;/span&gt; &lt;span class="nv"&gt;RR-A&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nt"&gt;#:transparent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;print-insn&lt;/span&gt; &lt;span class="nv"&gt;insn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;match&lt;/span&gt; &lt;span class="nv"&gt;insn&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;MOV-A-Rn&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;"MOV A, R~s~n"&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;MOV-Rn-A&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;"MOV R~s, A~n"&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;ANL-A-Rn&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;"ANL A, R~s~n"&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;ORL-A-Rn&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;"ORL A, R~s~n"&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;XRL-A-Rn&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;"XRL A, R~s~n"&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;XCH-A-Rn&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;"XCH A, R~s~n"&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;MOV-A-i&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;"MOV A, #0x~x~n"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bitvector-&amp;gt;natural&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;ANL-A-i&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;"ANL A, #0x~x~n"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bitvector-&amp;gt;natural&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;ORL-A-i&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;"ORL A, #0x~x~n"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bitvector-&amp;gt;natural&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;SWAP-A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;"SWAP A~n"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;CLR-C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;"CLR C~n"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;MOV-C-An&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;"MOV C, ACC.~s~n"&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;MOV-An-C&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;"MOV ACC.~s, C~n"&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;RLC-A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;"RLC A~n"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;RRC-A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;"RRC A~n"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;RL-A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;"RL A~n"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;RR-A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;"RR A~n"&lt;/span&gt;&lt;span class="p"&gt;)]))&lt;/span&gt;

&lt;span class="c1"&gt;; sketches&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;??insn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;choose*&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="c1"&gt;; 2 3 4 5 6 7))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;define-symbolic*&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bitvector&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="c1"&gt;;(define i (choose* (bv #xf0 8) (bv #x0f 8)))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;choose*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;MOV-A-Rn&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;MOV-Rn-A&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ANL-A-Rn&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ORL-A-Rn&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;XRL-A-Rn&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;XCH-A-Rn&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;MOV-A-i&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ANL-A-i&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ORL-A-i&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;SWAP-A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;CLR-C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;MOV-C-An&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;MOV-An-C&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;RLC-A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;RRC-A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;RL-A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;RR-A&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;??prog&lt;/span&gt; &lt;span class="nv"&gt;fuel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;fuel&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;null&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cons&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;??insn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;??prog&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;fuel&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;

&lt;span class="c1"&gt;; symbolic interpreter&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;run-insn&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="nv"&gt;insn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;match&lt;/span&gt; &lt;span class="nv"&gt;insn&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;MOV-A-Rn&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-state-A!&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-Rn-ref&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;MOV-Rn-A&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-Rn-set!&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-A&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;ANL-A-Rn&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-state-A!&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bvand&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-A&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-Rn-ref&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;ORL-A-Rn&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-state-A!&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bvor&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-A&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-Rn-ref&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;XRL-A-Rn&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-state-A!&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bvxor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-A&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-Rn-ref&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;XCH-A-Rn&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nf"&gt;A&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-A&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;Rn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-Rn-ref&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-state-A!&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="nv"&gt;Rn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-Rn-set!&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="nv"&gt;A&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;MOV-A-i&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-state-A!&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;ANL-A-i&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-state-A!&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bvand&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-A&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;ORL-A-i&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-state-A!&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bvor&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-A&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;SWAP-A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nf"&gt;A&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-A&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-state-A!&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;extract&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;extract&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="nv"&gt;A&lt;/span&gt;&lt;span class="p"&gt;))))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;CLR-C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-state-C!&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bv&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;MOV-C-An&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-state-C!&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;extract&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-A&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;MOV-An-C&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-state-A!&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;replace-bit&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-A&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-C&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;RLC-A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nf"&gt;A&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-A&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;C&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-C&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-state-A!&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;extract&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-state-C!&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;extract&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="nv"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;RRC-A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nf"&gt;A&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-A&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;C&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-C&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-state-A!&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;extract&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-state-C!&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;extract&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;RL-A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nf"&gt;A&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-A&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-state-A!&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;extract&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;extract&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="nv"&gt;A&lt;/span&gt;&lt;span class="p"&gt;))))]&lt;/span&gt;
    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;RR-A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nf"&gt;A&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-A&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-state-A!&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;extract&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;extract&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;A&lt;/span&gt;&lt;span class="p"&gt;))))]&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;; program verifier&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;verify-prog&lt;/span&gt; &lt;span class="nv"&gt;prog&lt;/span&gt; &lt;span class="nv"&gt;asserts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;make-state&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;S*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;make-state&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;solution&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;verify&lt;/span&gt;
     &lt;span class="nt"&gt;#:guarantee&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;for-each&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt; &lt;span class="nv"&gt;run-insn&lt;/span&gt; &lt;span class="nv"&gt;S*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;prog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;asserts&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="nv"&gt;S*&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;unsat?&lt;/span&gt; &lt;span class="nv"&gt;solution&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;#t&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;displayln&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;evaluate&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;  &lt;span class="nv"&gt;solution&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;displayln&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;evaluate&lt;/span&gt; &lt;span class="nv"&gt;S*&lt;/span&gt; &lt;span class="nv"&gt;solution&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="no"&gt;#f&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;; program synthesizer&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;synthesize-prog&lt;/span&gt; &lt;span class="nv"&gt;sketch&lt;/span&gt; &lt;span class="nv"&gt;asserts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;make-state&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;S*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;make-state&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;solution&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;synthesize&lt;/span&gt;
     &lt;span class="nt"&gt;#:forall&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;
     &lt;span class="nt"&gt;#:guarantee&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;for-each&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;insn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;run-insn&lt;/span&gt; &lt;span class="nv"&gt;S*&lt;/span&gt; &lt;span class="nv"&gt;insn&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nv"&gt;sketch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;asserts&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="nv"&gt;S*&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;unsat?&lt;/span&gt; &lt;span class="nv"&gt;solution&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;#f&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;evaluate&lt;/span&gt; &lt;span class="nv"&gt;sketch&lt;/span&gt; &lt;span class="nv"&gt;solution&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;optimize-prog&lt;/span&gt; &lt;span class="nv"&gt;max-fuel&lt;/span&gt; &lt;span class="nv"&gt;sketch-gen&lt;/span&gt; &lt;span class="nv"&gt;asserts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;worker&lt;/span&gt; &lt;span class="nv"&gt;fuel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;prog&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;synthesize-prog&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sketch-gen&lt;/span&gt; &lt;span class="nv"&gt;fuel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;asserts&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;prog&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;eprintf&lt;/span&gt; &lt;span class="s"&gt;"sat! ~s~n"&lt;/span&gt; &lt;span class="nv"&gt;fuel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;for-each&lt;/span&gt; &lt;span class="nv"&gt;print-insn&lt;/span&gt; &lt;span class="nv"&gt;prog&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;eprintf&lt;/span&gt; &lt;span class="s"&gt;"unsat! ~s~n"&lt;/span&gt; &lt;span class="nv"&gt;fuel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nv"&gt;fuel&lt;/span&gt; &lt;span class="nv"&gt;max-fuel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;#f&lt;/span&gt;
              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;worker&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;fuel&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;worker&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;optimize-prog/parallel&lt;/span&gt; &lt;span class="nv"&gt;max-fuel&lt;/span&gt; &lt;span class="nv"&gt;sketch-gen&lt;/span&gt; &lt;span class="nv"&gt;asserts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;solved&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;box&lt;/span&gt; &lt;span class="no"&gt;#f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;solved-fuel&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;box&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;threads&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;box&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;report-sema&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;make-semaphore&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;worker&lt;/span&gt; &lt;span class="nv"&gt;fuel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;cond&lt;/span&gt;
      &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unbox&lt;/span&gt; &lt;span class="nv"&gt;solved&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;fuel&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unbox&lt;/span&gt; &lt;span class="nv"&gt;solved-fuel&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;prog&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;synthesize-prog&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sketch-gen&lt;/span&gt; &lt;span class="nv"&gt;fuel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;asserts&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;call-with-semaphore/enable-break&lt;/span&gt; &lt;span class="nv"&gt;report-sema&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;prog&lt;/span&gt;
              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;eprintf&lt;/span&gt; &lt;span class="s"&gt;"sat! ~s~n"&lt;/span&gt; &lt;span class="nv"&gt;fuel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;for-each&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;thd-fuel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cdr&lt;/span&gt; &lt;span class="nv"&gt;thd-fuel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;fuel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;break-thread&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;car&lt;/span&gt; &lt;span class="nv"&gt;thd-fuel&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unbox&lt;/span&gt; &lt;span class="nv"&gt;threads&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unbox&lt;/span&gt; &lt;span class="nv"&gt;solved&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;fuel&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unbox&lt;/span&gt; &lt;span class="nv"&gt;solved-fuel&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
                      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set-box!&lt;/span&gt; &lt;span class="nv"&gt;solved-fuel&lt;/span&gt; &lt;span class="nv"&gt;fuel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set-box!&lt;/span&gt; &lt;span class="nv"&gt;solved&lt;/span&gt; &lt;span class="nv"&gt;prog&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;eprintf&lt;/span&gt; &lt;span class="s"&gt;"unsat! ~s~n"&lt;/span&gt; &lt;span class="nv"&gt;fuel&lt;/span&gt;&lt;span class="p"&gt;))))]))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;core-sema&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;make-semaphore&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;processor-count&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;for&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nf"&gt;fuel&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;in-range&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;add1&lt;/span&gt; &lt;span class="nv"&gt;max-fuel&lt;/span&gt;&lt;span class="p"&gt;))])&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;semaphore-wait&lt;/span&gt; &lt;span class="nv"&gt;core-sema&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;thd&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;thread&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;with-handlers&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;exn:break?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;void&lt;/span&gt;&lt;span class="p"&gt;))])&lt;/span&gt;
                  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;worker&lt;/span&gt; &lt;span class="nv"&gt;fuel&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;semaphore-post&lt;/span&gt; &lt;span class="nv"&gt;core-sema&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set-box!&lt;/span&gt; &lt;span class="nv"&gt;threads&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cons&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cons&lt;/span&gt; &lt;span class="nv"&gt;thd&lt;/span&gt; &lt;span class="nv"&gt;fuel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unbox&lt;/span&gt; &lt;span class="nv"&gt;threads&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;for-each&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;thd-fuel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;thread-wait&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;car&lt;/span&gt; &lt;span class="nv"&gt;thd-fuel&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unbox&lt;/span&gt; &lt;span class="nv"&gt;threads&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unbox&lt;/span&gt; &lt;span class="nv"&gt;solved&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;for-each&lt;/span&gt; &lt;span class="nv"&gt;print-insn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unbox&lt;/span&gt; &lt;span class="nv"&gt;solved&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;flush-output&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;assert-preserve&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="nv"&gt;S*&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;regs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;assert-preserve-reg&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bveq&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-Rn-ref&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-Rn-ref&lt;/span&gt; &lt;span class="nv"&gt;S*&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;for-each&lt;/span&gt; &lt;span class="nv"&gt;assert-preserve-reg&lt;/span&gt; &lt;span class="nv"&gt;regs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;; examples&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;optimize-8b-rotate-right&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;optimize-prog/parallel&lt;/span&gt;
   &lt;span class="mi"&gt;4&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;fuel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;??prog&lt;/span&gt; &lt;span class="nv"&gt;fuel&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;S&lt;/span&gt; &lt;span class="nv"&gt;S*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bveq&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;rotate-right&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-R0&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-R0&lt;/span&gt; &lt;span class="nv"&gt;S*&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;assert-preserve&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="nv"&gt;S*&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;for&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nf"&gt;n&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;in-range&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;time&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;"; rotate right R0 by ~a~n"&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;flush-output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;optimize-8b-rotate-right&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;"; "&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;optimize-16b-rotate-right&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;optimize-prog/parallel&lt;/span&gt;
   &lt;span class="mi"&gt;20&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;fuel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;fuel&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;append&lt;/span&gt;
       &lt;span class="c1"&gt;; help the synthesizer out a bit&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;MOV-A-Rn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;choose*&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;??prog&lt;/span&gt; &lt;span class="nv"&gt;fuel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;MOV-Rn-A&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;choose*&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;S&lt;/span&gt; &lt;span class="nv"&gt;S*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;R10&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-R1&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-R0&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="p"&gt;)))&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;R10*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-R1&lt;/span&gt; &lt;span class="nv"&gt;S*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;state-R0&lt;/span&gt; &lt;span class="nv"&gt;S*&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bveq&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;rotate-right&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="nv"&gt;R10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;R10*&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;assert-preserve&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="nv"&gt;S*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;for&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nf"&gt;n&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;in-range&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;time&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;"; rotate right R1:R0 by ~a~n"&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;flush-output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;optimize-16b-rotate-right&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;"; "&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id="results"&gt;Results&lt;/h1&gt;

&lt;p&gt;Generating the optimal 8-bit and 16-bit rotates took about half a day on a modern laptop (Dell XPS13 9360, using all cores and with mitigations disabled). Because of that I have not attempted generating wider ones so far.&lt;/p&gt;

&lt;h2 id="bit-rotates"&gt;8-bit rotates&lt;/h2&gt;

&lt;p&gt;The following code lists all optimal 8-bit rotates, by 0 to 7 bits.&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;rot8.asm (&lt;a href="/files/synth51/rot8.asm"&gt;download&lt;/a&gt;)&lt;/figcaption&gt;&lt;pre&gt;&lt;code class="language-text"&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;
&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
&lt;/pre&gt;&lt;/td&gt;
&lt;td class="rouge-code"&gt;&lt;pre&gt;; rotate right R0 by 0
; rotate right R0 by 1
MOV A, R0
RR A
MOV R0, A
; rotate right R0 by 2
MOV A, R0
RR A
RR A
MOV R0, A
; rotate right R0 by 3
XCH A, R0
RL A
SWAP A
MOV R0, A
; rotate right R0 by 4
MOV A, R0
SWAP A
MOV R0, A
; rotate right R0 by 5
MOV A, R0
SWAP A
RR A
XCH A, R0
; rotate right R0 by 6
MOV A, R0
RL A
RL A
MOV R0, A
; rotate right R0 by 7
MOV A, R0
RL A
MOV R0, A
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id="bit-rotates-1"&gt;16-bit rotates&lt;/h2&gt;

&lt;p&gt;The following code lists all optimal 16-bit rotates, by 0 to 15 bits. I find the approach the solver used for the rotate by 10 nothing short of brilliant, and the approach it took for rotate by 3/5/11/13 pretty neat as well.&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;rot16.asm (&lt;a href="/files/synth51/rot16.asm"&gt;download&lt;/a&gt;)&lt;/figcaption&gt;&lt;pre&gt;&lt;code class="language-text"&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;
&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
&lt;/pre&gt;&lt;/td&gt;
&lt;td class="rouge-code"&gt;&lt;pre&gt;; rotate right R1:R0 by 0
; rotate right R1:R0 by 1
MOV A, R1
MOV C, ACC.0
XCH A, R0
RRC A
XCH A, R0
RRC A
MOV R1, A
; rotate right R1:R0 by 2
MOV A, R1
MOV C, ACC.0
XCH A, R0
RRC A
XCH A, R0
RRC A
MOV C, ACC.0
XCH A, R0
RRC A
XCH A, R0
RRC A
MOV R1, A
; rotate right R1:R0 by 3
MOV A, R0
XRL A, R1
MOV R1, A
ANL A, #0xf8
XRL A, R0
SWAP A
RL A
XCH A, R1
SWAP A
RL A
XRL A, R1
MOV R0, A
; rotate right R1:R0 by 4
MOV A, R0
XRL A, R1
ANL A, #0xf0
XCH A, R1
XRL A, R1
SWAP A
XCH A, R0
XRL A, R1
SWAP A
MOV R1, A
; rotate right R1:R0 by 5
MOV A, R1
XRL A, R0
ANL A, #0x1f
XCH A, R0
XRL A, R0
RR A
SWAP A
XCH A, R0
XRL A, R1
SWAP A
RR A
MOV R1, A
; rotate right R1:R0 by 6
MOV A, R1
RLC A
XCH A, R0
RLC A
XCH A, R1
RLC A
MOV C, ACC.7
XCH A, R1
RLC A
XCH A, R1
RLC A
MOV R0, A
; rotate right R1:R0 by 7
MOV A, R0
MOV C, ACC.7
MOV A, R1
RLC A
XCH A, R0
RLC A
MOV R1, A
; rotate right R1:R0 by 8
MOV A, R1
XCH A, R0
MOV R1, A
; rotate right R1:R0 by 9
MOV A, R1
RRC A
MOV A, R0
RRC A
XCH A, R1
RRC A
MOV R0, A
; rotate right R1:R0 by 10
MOV A, R1
XRL A, R0
ANL A, #0x3
XRL A, R1
RR A
RR A
XCH A, R0
XRL A, R1
RR A
RR A
XRL A, R0
MOV R1, A
; rotate right R1:R0 by 11
MOV A, R1
XRL A, R0
MOV R1, A
ANL A, #0x7
XRL A, R0
RL A
SWAP A
XCH A, R1
RL A
SWAP A
XRL A, R1
MOV R0, A
; rotate right R1:R0 by 12
MOV A, R0
XRL A, R1
ANL A, #0xf0
XCH A, R1
XRL A, R1
SWAP A
XCH A, R1
XRL A, R0
SWAP A
MOV R0, A
; rotate right R1:R0 by 13
MOV A, R1
XRL A, R0
ANL A, #0xe0
XCH A, R0
XRL A, R0
SWAP A
RR A
XCH A, R0
XRL A, R1
RR A
SWAP A
MOV R1, A
; rotate right R1:R0 by 14
MOV A, R1
MOV C, ACC.7
XCH A, R0
RLC A
XCH A, R0
RLC A
MOV C, ACC.7
XCH A, R0
RLC A
XCH A, R0
RLC A
MOV R1, A
; rotate right R1:R0 by 15
MOV A, R1
MOV C, ACC.7
XCH A, R0
RLC A
XCH A, R0
RLC A
MOV R1, A
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</content>
    <summary type="html">&lt;p&gt;While working on an application targeting Nordic nRF24LE1, a wireless SoC with a fairly slow 8051 core, I was wondering if I can have fast, or at least not unusably slow, cryptography. Most cryptographic algorithms involve wide rotates, and the 8051 only has instructions for rotating a 8-bit accumulator by one bit at a time. In this note I explore deriving optimal code for rotating values in registers (that may be bigger than 8 bits) by multiple bits.&lt;/p&gt;

</summary>
  </entry>
  <entry>
    <id>tag:lab.whitequark.org,2020-01-27:/notes/2020-01-27/undocumented-nrf24lu1-quirks/</id>
    <title type="html">Undocumented nRF24LU1+ quirks</title>
    <published>2020-01-27T23:48:52Z</published>
    <updated>2020-01-27T23:48:52Z</updated>
    <link rel="alternate" href="https://lab.whitequark.org/notes/2020-01-27/undocumented-nrf24lu1-quirks/" type="text/html"/>
    <content type="html">&lt;p&gt;While working with nRF24LU1+, I discovered that the chip has lots and lots of odd corners that are sparsely or strangely documented, where the silicon doesn’t match documentation, etc.&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul id="markdown-toc"&gt;
  &lt;li&gt;&lt;a href="#info-page-size" id="markdown-toc-info-page-size"&gt;Info page size&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#reading-info-page-from-mcu" id="markdown-toc-reading-info-page-from-mcu"&gt;Reading info page from MCU&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#bootloader-and-reset-vector" id="markdown-toc-bootloader-and-reset-vector"&gt;Bootloader and reset vector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id="info-page-size"&gt;Info page size&lt;/h1&gt;

&lt;p&gt;The datasheet describes the info page as 512 bytes long. However, setting &lt;code&gt;FSR.INFEN&lt;/code&gt; and reading the entire address space reveals a 1024 byte periodic structure. The second half appears to be a ROM (it cannot be either programmed or erased), and on my chip it starts with &lt;code&gt;43 46 54 39 32 32 11 41 2c&lt;/code&gt; (“CFT922”) and has an additional &lt;code&gt;00&lt;/code&gt; at offset 0x21.&lt;/p&gt;

&lt;h1 id="reading-info-page-from-mcu"&gt;Reading info page from MCU&lt;/h1&gt;

&lt;p&gt;The datasheet describes in detail how to read info page via SPI, and that works just fine. However, it doesn’t explain how to read it via MCU, which is strange because the info page contains an unique chip ID and it is avilable for user data. The &lt;code&gt;FSR.INFEN&lt;/code&gt; bit is documented only to affect SPI accesses, for which a diagram implies the info page replaces the 0th page (0x0000..0x0100).&lt;/p&gt;

&lt;p&gt;In practice, it works rather differently. Setting &lt;code&gt;FSR.INFEN&lt;/code&gt; in firmware replaces all data accesses to flash address space (which is the entire lower half of it) with info page accesses, similar to the previous section. However, code accesses are not affected.&lt;/p&gt;

&lt;p&gt;In terms of the 8051 instruction set, &lt;code&gt;MOVC&lt;/code&gt; always performs a code access, and &lt;code&gt;MOVX&lt;/code&gt; can perform either a data (0) or a code (1) access depending on the state of &lt;code&gt;PCON.PMW&lt;/code&gt; bit. &lt;code&gt;PMW&lt;/code&gt; stands for “program memory write”, but, in spite of that name, it affects reads too. Because nRF24LU1+ has non-overlapping code and data spaces (besides the info page quirk) there are no references to it in the documentation for that chip, but the documentation for nRF24LE1, which does have overlapping address spaces, is more suggestive.&lt;/p&gt;

&lt;p&gt;This means that the info page may be read via the MCU by setting &lt;code&gt;PCON.PMW&lt;/code&gt; and &lt;code&gt;FSR.INFEN&lt;/code&gt; to make compiler-emitted &lt;code&gt;MOVX&lt;/code&gt; instructions work as expected, and then temporarily clearing &lt;code&gt;PCON.PMW&lt;/code&gt; each time a byte of the info page is read.&lt;/p&gt;

&lt;h1 id="bootloader-and-reset-vector"&gt;Bootloader and reset vector&lt;/h1&gt;

&lt;p&gt;The nRF24LU1+ flash is clearly designed for atomic firmware updates: the population count of the 16 bytes at the top of the flash determines whether the bootloader (“protected area”) or application (“unprotected area”) is executed at reset. Thus, it is expected that the application and bootloader take turns programming single bits, which will succeed under worst case power failure.&lt;/p&gt;

&lt;p&gt;However, it is useful to have a permanent bootloader mode, where the chip can be programmed via USB by using a strap pin, or a delay and a special USB request. To achieve this, a single bit may be programmed at the top of flash, with the bootloader running the application if the firmware update trigger is not present.&lt;/p&gt;

&lt;p&gt;Unfortunately, branching to address 0 doesn’t work; it just causes the bootloader to be re-entered. The datasheet opaquely alludes to this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In a program running in a protected flash area, movc may not be used to access addresses 0x00 to 0x03.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By using &lt;code&gt;MOVC&lt;/code&gt; to access those bytes, it can be seen that, rather than changing the address of the reset vector of the MCU (or for that matter the interrupt vector table; interrupts may not be used in the bootloader), the designers of this chip decided to replace code accesses to the reset vector with a procedurally generated instruction; when &lt;code&gt;FSR.STP&lt;/code&gt; is enabled, the first four bytes of the code address space are replaced with &lt;code&gt;02 XX YY 00&lt;/code&gt;, where &lt;code&gt;XX YY&lt;/code&gt; is the address of the first protected page. This decodes to &lt;code&gt;LJMP #XXYYh; NOP&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Most 8051 MCUs use an interrupt vector table with 3 bytes per entry, which in practice means that it is usually densely filled with &lt;code&gt;LJMP&lt;/code&gt; instructions. (However, there are other possibilities, e.g. sdcc may emit &lt;code&gt;AJMP&lt;/code&gt;.) That means that it is practical for a bootloader to read out an instruction, recognize an &lt;code&gt;LJMP&lt;/code&gt; (and perhaps a few others) and interpret it, i.e. jump to the address within.&lt;/p&gt;

&lt;p&gt;Unfortunately, there is a problem with this approach, which is that even once the application is running, the &lt;code&gt;FSR.STP&lt;/code&gt; bit is still set, and this corrupts the first byte of the first interrupt vector (timer 0 overflow). This may be worked around by placing a right-aligned &lt;code&gt;SJMP&lt;/code&gt; or &lt;code&gt;AJMP&lt;/code&gt; there. Similarly, if no interrupts are used, the linker may place CRT startup code there, which may be worked around with a dummy interrupt handler. In both cases it is necessary to modify the application firmware; there is nothing the bootloader can do here as &lt;code&gt;FSR.STP&lt;/code&gt; can not be cleared.&lt;/p&gt;
</content>
    <summary type="html">&lt;p&gt;While working with nRF24LU1+, I discovered that the chip has lots and lots of odd corners that are sparsely or strangely documented, where the silicon doesn’t match documentation, etc.&lt;/p&gt;

</summary>
  </entry>
  <entry>
    <id>tag:lab.whitequark.org,2020-01-25:/notes/2020-01-25/pixel-pawn-wireless-flash-trigger-on-air-protocol/</id>
    <title type="html">Pixel Pawn wireless flash trigger on-air protocol</title>
    <published>2020-01-25T18:43:35Z</published>
    <updated>2020-01-25T18:43:35Z</updated>
    <link rel="alternate" href="https://lab.whitequark.org/notes/2020-01-25/pixel-pawn-wireless-flash-trigger-on-air-protocol/" type="text/html"/>
    <content type="html">&lt;p&gt;In this note I describe the on-air protocol of Pixel Pawn wireless flash trigger.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;ul id="markdown-toc"&gt;
  &lt;li&gt;&lt;a href="#tools-and-methods" id="markdown-toc-tools-and-methods"&gt;Tools and methods&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#framing" id="markdown-toc-framing"&gt;Framing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#channels" id="markdown-toc-channels"&gt;Channels&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#commands" id="markdown-toc-commands"&gt;Commands&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#communication" id="markdown-toc-communication"&gt;Communication&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id="tools-and-methods"&gt;Tools and methods&lt;/h1&gt;

&lt;p&gt;To interact with the flash trigger, I used &lt;a href="https://limemicro.com/products/boards/limesdr-mini/"&gt;Lime Microsystems LimeSDR Mini&lt;/a&gt;. To determine the center frequency of transmissions, I used &lt;a href="https://github.com/f4exb/sdrangel"&gt;SDRAngel&lt;/a&gt; in spectrogram mode, knowing that the device is advertised to work in the 2.4 GHz range. To determine bit rate, modulation, and packet format, I used &lt;a href="https://github.com/jopohl/urh"&gt;Universal Radio Hacker&lt;/a&gt; as described in its documentation. To understand commands better, I used the &lt;a href="https://github.com/GlasgowEmbedded/glasgow"&gt;Glasgow debug tool&lt;/a&gt;’s &lt;code&gt;radio-nrf24l&lt;/code&gt; applet in transmit and receive mode as described &lt;a href="#communication"&gt;below&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id="framing"&gt;Framing&lt;/h1&gt;

&lt;p&gt;Modulation GMSK, data rate 250 kbps, on-air time 356.00 µs, of which settling time 60.75 µs, transmission time 295.25 µs. Packet format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1010101010101010101010101010101010101100001101010111111001001110101-1100000
&amp;lt;                        67 fixed bits                            &amp;gt; &amp;lt; CMD &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each button press produces a burst of 5-10 packets. However, holding a button or being in an active mode only produces a single packet every few hundred ms.&lt;/p&gt;

&lt;h1 id="channels"&gt;Channels&lt;/h1&gt;

&lt;p&gt;The channel to frequency mapping is as follows:&lt;/p&gt;

&lt;table style="width: 200px"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Channel&lt;/th&gt;
      &lt;th&gt;Frequency&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;HHHH&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;2.4020&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;HHHL&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;2.4065&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;HHLH&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;2.4100&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;HHLL&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;2.4185&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;HLHH&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;2.4210&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;HLHL&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;2.4295&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;HLLH&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;2.4355&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;HLLL&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;2.4385&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;LHHH&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;2.4450&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;LHHL&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;2.4465&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;LHLH&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;2.4515&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;LHLL&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;2.4600&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;LLHH&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;2.4620&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;LLHL&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;2.4695&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;LLLH&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;2.4710&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;LLLL&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;2.4770&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id="commands"&gt;Commands&lt;/h1&gt;

&lt;p&gt;Commands are specified in 7 last bits of the packet.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Command&lt;/th&gt;
      &lt;th&gt;Encoding&lt;/th&gt;
      &lt;th&gt;Condition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;wakeup&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;1100000&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;power on, mode switch, other command prefix&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;autofocus&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;0001111&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;half press&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;normal release&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;0010100&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;mode 1 press&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;shutter open&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;0010000&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;mode 2 first press&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;shutter close&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;0011011&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;mode 2 second press&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;timer start&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;1100100&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;mode 3 first press&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;timer cancel&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;0011011&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;mode 3 second press&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The preamble can be quite short, as few as 2 octets long. However, commands that are not preceded by &lt;code&gt;1100000&lt;/code&gt; will be often not recognized, regardless of preamble length.&lt;/p&gt;

&lt;h1 id="communication"&gt;Communication&lt;/h1&gt;

&lt;p&gt;Considering the framing, any appropriately encoded octet sequence that includes the following one will trigger a command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aa aa aa aa b0 d5 f9 3a (80|CMD)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An elegant way to emulate a transmitter is to use an nRF24L01(+) in nRF2401 compatible mode with 4 address bytes set to &lt;code&gt;aa aa aa aa&lt;/code&gt; and data bytes set to &lt;code&gt;b0 d5 f9 3a (80|CMD)&lt;/code&gt;. However, in a pinch, just transmitting this as a kind of in-band signal in any other packet framing also works just fine.&lt;/p&gt;

&lt;p&gt;Similarly, an elegant way to emulate a receiver is to use an nRF24L01(+) in nRF2401 compatible mode with 4 address bytes set to &lt;code&gt;b0 d5 f9 3a&lt;/code&gt;. (It uses the same &lt;code&gt;aa&lt;/code&gt; preamble, and synchronizes to address bytes.)&lt;/p&gt;

&lt;p&gt;nRF24L01(+) only support channel frequencies of integer MHz; this flash trigger uses some channels of half-integer MHz, e.g. 2.4465. The nRF24L01(+) is promiscuous enough that it easily and reliably locks to transmissions on half-integer MHz channels. However, the flash trigger receiver configured to use such a channel ignores any transmissions half MHz apart. This means that an nRF24L01(+) can only transmit on half of the defined channels.&lt;/p&gt;

&lt;p&gt;One could notice that nRF24L01(+) transmits with its PLL in open loop, and the frequency of said PLL drifts down. By issuing the &lt;code&gt;REUSE_TX_PL&lt;/code&gt; command and pulsing CE for a few ms, it will transmit the last command in a loop while drifting down, and eventually hitting the right frequency. This, however, is a rather disgusting workaround.&lt;/p&gt;
</content>
    <summary type="html">&lt;p&gt;In this note I describe the on-air protocol of Pixel Pawn wireless flash trigger.&lt;/p&gt;

</summary>
  </entry>
  <entry>
    <id>tag:lab.whitequark.org,2018-10-28:/notes/2018-10-28/patching-nvidia-gpu-driver-for-hot-unplug-on-linux/</id>
    <title type="html">Patching nVidia GPU driver for hot-unplug on Linux</title>
    <published>2018-10-28T08:27:37Z</published>
    <updated>2018-10-28T08:27:37Z</updated>
    <link rel="alternate" href="https://lab.whitequark.org/notes/2018-10-28/patching-nvidia-gpu-driver-for-hot-unplug-on-linux/" type="text/html"/>
    <content type="html">&lt;p&gt;Recently, I’ve using an extremely cursed setup where my XPS 13 9360 laptop is connected to a Sonnet EchoExpress 2 box rewired for Thunderbolt 3 that has an nVidia Quadro 600 GPU, and Linux is set up for render offload to the eGPU and then frame transfer back to iGPU to be displayed on the laptop’s integrated display, which (to my sheer surprise) not only works quire reliably, but even gives me higher FPS in Team Fortress 2 than the iGPU.&lt;/p&gt;

&lt;p&gt;There’s only really one downside: if the eGPU falls off the bus, either because someone™ pulled out the cable, or because the stars didn’t align quite right this morning and it decided to enumerate seemingly at random (sometimes this is preceeded by whining from PCIe AER, sometimes not, I &lt;em&gt;think&lt;/em&gt; it’s some sort of hardware issue like a badly inserted PCIe card, but I’m not entirely sure), the nVidia driver… hangs. Hangs quite deliberately, as the sources to the kernel driver show. This leaves the Xorg instance bound to the eGPU hung forever (which confuses bumblebee, but is otherwise not especially bad), and also prevents any new ones from using the eGPU (which is bad).&lt;/p&gt;

&lt;p&gt;Anyway, I was kind of annoyed of rebooting every time it happens, so I decided to reboot a few more dozen times instead while patching the driver. This has indeed worked, and left me with something similar to a functional hot-unplug, mildly crippled by the fact that nvidia-modeset is a completely opaque blob that keeps some internal state and tries to act on it, getting stuck when it tries to do something to the now-missing eGPU.&lt;/p&gt;

&lt;p&gt;Turns out, there are only a few issues preventing functional hot-unplug.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In &lt;code&gt;nvidia_remove&lt;/code&gt;, the driver actually checks if anyone’s still trying to use it, and if yes, it tries to just hang the removal process. This doesn’t actually work, or rather, it mostly works by accident. It starts an infinite loop calling &lt;code&gt;os_schedule()&lt;/code&gt; while having taken the &lt;code&gt;NV_LINUX_DEVICES&lt;/code&gt; lock. While in the default configuration this indeed hangs any reentrant requests into the driver by virtue of &lt;code&gt;NV_CHECK_PCI_CONFIG_SPACE&lt;/code&gt; taking the same lock (in &lt;code&gt;verify_pci_bars&lt;/code&gt;, passing the &lt;code&gt;NVreg_CheckPCIConfigSpace=0&lt;/code&gt; module option eliminates that accidental safety mechanism, and allows reentrant requests to proceed. They do not crash due to memory being deallocated in &lt;code&gt;nvidia_remove&lt;/code&gt; (so you don’t get an unhandled kernel page fault), but they still crash due to being unable to access the GPU.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The NVKMS component (in the &lt;code&gt;nvidia-modeset&lt;/code&gt; module) tries to maintain some state, and change it when e.g. the Xorg instance quits and closes the &lt;code&gt;/dev/nvidia-modeset&lt;/code&gt; file. Unfortunately, it does not expect the GPU to go away, and first spews a few messages to &lt;code&gt;dmesg&lt;/code&gt; similar to &lt;code&gt;nvidia-modeset: ERROR: GPU:0: Failed to query display engine channel state: 0x0000857d:0:0:0x0000000f&lt;/code&gt;, after which it appears to hang somewhere inside the blob, which has been conveniently stripped of all symbols. This needs to be prevented, but…&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The NVKMS component effectively only exposes a single opaque ioctl, and all the communication, including communication of the GPU bus ID, happens out of band with regards to the open source parts of the &lt;code&gt;nvidia-modeset&lt;/code&gt; module. Fortunately, NVKMS calls back into NVRM, and this allows us to associate each &lt;code&gt;/dev/nvidia-modeset&lt;/code&gt; fd with the GPU bus ID.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When unloading NVKMS, it also tries to act on its internal state and change the GPU state, which leads to the same hang.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All in all, this allows a patch to be written that detects when a GPU goes away, ignores all further NVKMS requests related to that specific GPU (and returns &lt;code&gt;-ENOENT&lt;/code&gt; in response to ioctls, which Xorg appropriately interprets as a fault condition), correctly releases the resources by requesting NVRM, and improperly unloads NVKMS so it doesn’t try to reset the GPU state. (All actual resources should be released by this point, and NVKMS doesn’t have any resource allocation callbacks other than those we already intercept, so &lt;em&gt;in theory&lt;/em&gt; this doesn’t have any bad consequences. But I’m not working for nVidia, so this might be completely wrong.)&lt;/p&gt;

&lt;p&gt;After the GPU is plugged back in, NVKMS will try to act on its internal state again; in this case, it doesn’t hang, but it doesn’t initialize the GPU correctly either, so the &lt;code&gt;nvidia-modeset&lt;/code&gt; kernel module has to be (manually) reloaded. It’s not easy to do this automatically because in a hypothetical system with more than one nVidia GPU the module would still be in use when one of them dies, and so just hard reloading NVKMS would have unfortunate consequences. (Though, I don’t really know whether NVKMS would try to access the dead GPU in response to the request acting on the other GPU anyway. I decided to do it conservatively.) Once it’s reloaded you’re back in the game though!&lt;/p&gt;

&lt;p&gt;Here’s the patch, written against the &lt;code&gt;nvidia-legacy-390xx-390.87&lt;/code&gt; Debian source package:&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;nvidia-hot-gpu-on-gpu-unplug-action.patch (&lt;a href="/files/nvidia-hot-gpu-on-gpu-unplug-action.patch"&gt;download&lt;/a&gt;)&lt;/figcaption&gt;&lt;pre&gt;&lt;code class="language-diff"&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;
&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
&lt;/pre&gt;&lt;/td&gt;
&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="gh"&gt;diff -ur original/common/inc/nv-linux.h patchedl/common/inc/nv-linux.h
&lt;/span&gt;&lt;span class="gd"&gt;--- original/common/inc/nv-linux.h	2018-09-23 12:20:02.000000000 +0000
&lt;/span&gt;&lt;span class="gi"&gt;+++ patched/common/inc/nv-linux.h	2018-10-28 07:19:21.526566940 +0000
&lt;/span&gt;&lt;span class="p"&gt;@@ -1465,6 +1465,7 @@&lt;/span&gt;
 typedef struct nv_linux_state_s {
     nv_state_t nv_state;
     atomic_t usage_count;
&lt;span class="gi"&gt;+    atomic_t dead;
&lt;/span&gt; 
     struct pci_dev *dev;
 
&lt;span class="gh"&gt;diff -ur original/common/inc/nv-modeset-interface.h patched/common/inc/nv-modeset-interface.h
&lt;/span&gt;&lt;span class="gd"&gt;--- original/common/inc/nv-modeset-interface.h	2018-08-22 00:55:23.000000000 +0000
&lt;/span&gt;&lt;span class="gi"&gt;+++ patched/common/inc/nv-modeset-interface.h	2018-10-28 07:22:00.768238371 +0000
&lt;/span&gt;&lt;span class="p"&gt;@@ -25,6 +25,8 @@&lt;/span&gt;
 
 #include "nv-gpu-info.h"
 
&lt;span class="gi"&gt;+#include &amp;lt;asm/atomic.h&amp;gt;
+
&lt;/span&gt; /*
  * nvidia_modeset_rm_ops_t::op gets assigned a function pointer from
  * core RM, which uses the calling convention of arguments on the
&lt;span class="p"&gt;@@ -115,6 +117,8 @@&lt;/span&gt;
 
     int (*set_callbacks)(const nvidia_modeset_callbacks_t *cb);
 
&lt;span class="gi"&gt;+    atomic_t * (*gpu_dead)(NvU32 gpu_id);
+
&lt;/span&gt; } nvidia_modeset_rm_ops_t;
 
 NV_STATUS nvidia_get_rm_ops(nvidia_modeset_rm_ops_t *rm_ops);
&lt;span class="gh"&gt;diff -ur original/common/inc/nv-proto.h patched/common/inc/nv-proto.h
&lt;/span&gt;&lt;span class="gd"&gt;--- original/common/inc/nv-proto.h	2018-08-22 00:55:23.000000000 +0000
&lt;/span&gt;&lt;span class="gi"&gt;+++ patched/common/inc/nv-proto.h	2018-10-28 07:20:49.939494812 +0000
&lt;/span&gt;&lt;span class="p"&gt;@@ -81,6 +81,7 @@&lt;/span&gt;
 NvBool      nvidia_get_gpuid_list       (NvU32 *gpu_ids, NvU32 *gpu_count);
 int         nvidia_dev_get              (NvU32, nvidia_stack_t *);
 void        nvidia_dev_put              (NvU32, nvidia_stack_t *);
&lt;span class="gi"&gt;+atomic_t *  nvidia_dev_dead             (NvU32);
&lt;/span&gt; int         nvidia_dev_get_uuid         (const NvU8 *, nvidia_stack_t *);
 void        nvidia_dev_put_uuid         (const NvU8 *, nvidia_stack_t *);
 int         nvidia_dev_get_pci_info     (const NvU8 *, struct pci_dev **, NvU64 *, NvU64 *);
&lt;span class="gh"&gt;diff -ur original/nvidia/nv.c patched/nvidia/nv.c
&lt;/span&gt;&lt;span class="gd"&gt;--- original/nvidia/nv.c	2018-09-23 12:20:02.000000000 +0000
&lt;/span&gt;&lt;span class="gi"&gt;+++ patched/nvidia/nv.c	2018-10-28 07:48:05.895025112 +0000
&lt;/span&gt;&lt;span class="p"&gt;@@ -1944,6 +1944,12 @@&lt;/span&gt;
     unsigned int i;
     NvBool bRemove = NV_FALSE;
 
&lt;span class="gi"&gt;+    if (NV_ATOMIC_READ(nvl-&amp;gt;dead))
+    {
+        nv_printf(NV_DBG_ERRORS, "NVRM: nvidia_close called on dead device by pid %d!\n",
+                  current-&amp;gt;pid);
+    }
+
&lt;/span&gt;     NV_CHECK_PCI_CONFIG_SPACE(sp, nv, TRUE, TRUE, NV_MAY_SLEEP());
 
     /* for control device, just jump to its open routine */
&lt;span class="p"&gt;@@ -2106,6 +2112,12 @@&lt;/span&gt;
     size_t arg_size;
     int arg_cmd;
 
&lt;span class="gi"&gt;+    if (NV_ATOMIC_READ(nvl-&amp;gt;dead))
+    {
+        nv_printf(NV_DBG_ERRORS, "NVRM: nvidia_ioctl called on dead device by pid %d!\n",
+                  current-&amp;gt;pid);
+    }
+
&lt;/span&gt;     nv_printf(NV_DBG_INFO, "NVRM: ioctl(0x%x, 0x%x, 0x%x)\n",
         _IOC_NR(cmd), (unsigned int) i_arg, _IOC_SIZE(cmd));
 
&lt;span class="p"&gt;@@ -3217,6 +3229,7 @@&lt;/span&gt;
     NV_INIT_MUTEX(&amp;amp;nvl-&amp;gt;ldata_lock);
 
     NV_ATOMIC_SET(nvl-&amp;gt;usage_count, 0);
&lt;span class="gi"&gt;+    NV_ATOMIC_SET(nvl-&amp;gt;dead, 0);
&lt;/span&gt; 
     if (!rm_init_event_locks(sp, nv))
         return NV_FALSE;
&lt;span class="p"&gt;@@ -4018,14 +4031,38 @@&lt;/span&gt;
         nv_printf(NV_DBG_ERRORS,
                   "NVRM: Attempting to remove minor device %u with non-zero usage count!\n",
                   nvl-&amp;gt;minor_num);
&lt;span class="gi"&gt;+        nv_printf(NV_DBG_ERRORS,
+                  "NVRM: YOLO, waiting for usage count to drop to zero\n");
&lt;/span&gt;         WARN_ON(1);
 
&lt;span class="gd"&gt;-        /* We can't continue without corrupting state, so just hang to give the
-         * user some chance to do something about this before reboot */
-        while (1)
&lt;/span&gt;&lt;span class="gi"&gt;+        NV_ATOMIC_SET(nvl-&amp;gt;dead, 1);
+
+        /* Insanity check: wait until all clients die, then hope for the best. */
+        while (1) {
+            UNLOCK_NV_LINUX_DEVICES();
&lt;/span&gt;             os_schedule();
&lt;span class="gd"&gt;-    }
&lt;/span&gt;&lt;span class="gi"&gt;+            LOCK_NV_LINUX_DEVICES();
+
+            nvl = pci_get_drvdata(dev);
+            if (!nvl || (nvl-&amp;gt;dev != dev))
+            {
+                goto done;
+            }
+
+            if (NV_ATOMIC_READ(nvl-&amp;gt;usage_count) == 0)
+            {
+                break;
+            }
+        }
&lt;/span&gt; 
&lt;span class="gi"&gt;+        nv_printf(NV_DBG_ERRORS,
+                  "NVRM: Usage count is now zero, proceeding to remove the GPU\n");
+        nv_printf(NV_DBG_ERRORS,
+                  "NVRM: This is not actually supposed to work lol. Hope it does tho 👍\n");
+        nv_printf(NV_DBG_ERRORS,
+                  "NVRM: You probably want to reload nvidia-modeset now if you want any "
+                  "of this to ever start up again, but like, man, that's your choice entirely\n");
+    }
&lt;/span&gt;     nv = NV_STATE_PTR(nvl);
     if (nvl == nv_linux_devices)
         nv_linux_devices = nvl-&amp;gt;next;
&lt;span class="p"&gt;@@ -4712,6 +4749,22 @@&lt;/span&gt;
     up(&amp;amp;nvl-&amp;gt;ldata_lock);
 }
 
&lt;span class="gi"&gt;+atomic_t *nvidia_dev_dead(NvU32 gpu_id)
+{
+    nv_linux_state_t *nvl;
+    atomic_t *ret;
+
+    /* Takes nvl-&amp;gt;ldata_lock */
+    nvl = find_gpu_id(gpu_id);
+    if (!nvl)
+        return NV_FALSE;
+
+    ret = &amp;amp;nvl-&amp;gt;dead;
+    up(&amp;amp;nvl-&amp;gt;ldata_lock);
+
+    return ret;
+}
+
&lt;/span&gt; /*
  * Like nvidia_dev_get but uses UUID instead of gpu_id. Note that this may
  * trigger initialization and teardown of unrelated devices to look up their
&lt;span class="gh"&gt;diff -ur original/nvidia/nv-modeset-interface.c patched/nvidia/nv-modeset-interface.c
&lt;/span&gt;&lt;span class="gd"&gt;--- original/nvidia/nv-modeset-interface.c	2018-08-22 00:55:22.000000000 +0000
&lt;/span&gt;&lt;span class="gi"&gt;+++ patched/nvidia/nv-modeset-interface.c	2018-10-28 07:20:25.959243110 +0000
&lt;/span&gt;&lt;span class="p"&gt;@@ -114,6 +114,7 @@&lt;/span&gt;
         .close_gpu      = nvidia_dev_put,
         .op             = rm_kernel_rmapi_op, /* provided by nv-kernel.o */
         .set_callbacks  = nvidia_modeset_set_callbacks,
&lt;span class="gi"&gt;+        .gpu_dead       = nvidia_dev_dead,
&lt;/span&gt;     };
 
     if (strcmp(rm_ops-&amp;gt;version_string, NV_VERSION_STRING) != 0)
&lt;span class="gh"&gt;diff -ur original/nvidia/nv-reg.h patched/nvidia/nv-reg.h
diff -ur original/nvidia-modeset/nvidia-modeset-linux.c patched/nvidia-modeset/nvidia-modeset-linux.c
&lt;/span&gt;&lt;span class="gd"&gt;--- original/nvidia-modeset/nvidia-modeset-linux.c	2018-09-23 12:20:02.000000000 +0000
&lt;/span&gt;&lt;span class="gi"&gt;+++ patched/nvidia-modeset/nvidia-modeset-linux.c	2018-10-28 07:47:14.738703417 +0000
&lt;/span&gt;&lt;span class="p"&gt;@@ -75,6 +75,9 @@&lt;/span&gt;
 
 static struct semaphore nvkms_lock;
 
&lt;span class="gi"&gt;+static NvU32 clopen_gpu_id;
+static NvBool leak_on_unload;
+
&lt;/span&gt; /*************************************************************************
  * NVKMS executes queued work items on a single kthread.
  *************************************************************************/
&lt;span class="p"&gt;@@ -89,6 +92,9 @@&lt;/span&gt;
 struct nvkms_per_open {
     void *data;
 
&lt;span class="gi"&gt;+    NvU32 gpu_id;
+    atomic_t *gpu_dead;
+
&lt;/span&gt;     enum NvKmsClientType type;
 
     union {
&lt;span class="p"&gt;@@ -711,6 +717,9 @@&lt;/span&gt;
     nvidia_modeset_stack_ptr stack = NULL;
     NvBool ret;
 
&lt;span class="gi"&gt;+    printk(KERN_INFO NVKMS_LOG_PREFIX "nvkms_open_gpu called with %08x, pid %d\n",
+           gpuId, current-&amp;gt;pid);
+
&lt;/span&gt;     if (__rm_ops.alloc_stack(&amp;amp;stack) != 0) {
         return NV_FALSE;
     }
&lt;span class="p"&gt;@@ -719,6 +728,10 @@&lt;/span&gt;
 
     __rm_ops.free_stack(stack);
 
&lt;span class="gi"&gt;+    if (ret) {
+        clopen_gpu_id = gpuId;
+    }
+
&lt;/span&gt;     return ret;
 }
 
&lt;span class="p"&gt;@@ -726,12 +739,17 @@&lt;/span&gt;
 {
     nvidia_modeset_stack_ptr stack = NULL;
 
&lt;span class="gi"&gt;+    printk(KERN_INFO NVKMS_LOG_PREFIX "nvkms_close_gpu called with %08x, pid %d\n",
+           gpuId, current-&amp;gt;pid);
+
&lt;/span&gt;     if (__rm_ops.alloc_stack(&amp;amp;stack) != 0) {
         return;
     }
 
     __rm_ops.close_gpu(gpuId, stack);
 
&lt;span class="gi"&gt;+    clopen_gpu_id = gpuId;
+
&lt;/span&gt;     __rm_ops.free_stack(stack);
 }
 
&lt;span class="p"&gt;@@ -771,8 +789,14 @@&lt;/span&gt;
 
     popen-&amp;gt;type = type;
 
&lt;span class="gi"&gt;+    printk(KERN_INFO NVKMS_LOG_PREFIX "entering nvkms_open_common, pid %d\n",
+           current-&amp;gt;pid);
+
&lt;/span&gt;     *status = down_interruptible(&amp;amp;nvkms_lock);
 
&lt;span class="gi"&gt;+    printk(KERN_INFO NVKMS_LOG_PREFIX "taken lock in nvkms_open_common, pid %d\n",
+           current-&amp;gt;pid);
+
&lt;/span&gt;     if (*status != 0) {
         goto failed;
     }
&lt;span class="p"&gt;@@ -781,6 +805,9 @@&lt;/span&gt;
 
     up(&amp;amp;nvkms_lock);
 
&lt;span class="gi"&gt;+    printk(KERN_INFO NVKMS_LOG_PREFIX "given up lock in nvkms_open_common, pid %d\n",
+           current-&amp;gt;pid);
+
&lt;/span&gt;     if (popen-&amp;gt;data == NULL) {
         *status = -EPERM;
         goto failed;
&lt;span class="p"&gt;@@ -799,10 +826,16 @@&lt;/span&gt;
 
     *status = 0;
 
&lt;span class="gi"&gt;+    printk(KERN_INFO NVKMS_LOG_PREFIX "exiting in nvkms_open_common, pid %d\n",
+           current-&amp;gt;pid);
+
&lt;/span&gt;     return popen;
 
 failed:
 
&lt;span class="gi"&gt;+    printk(KERN_INFO NVKMS_LOG_PREFIX "error in nvkms_open_common, pid %d\n",
+           current-&amp;gt;pid);
+
&lt;/span&gt;     nvkms_free(popen, sizeof(*popen));
 
     return NULL;
&lt;span class="p"&gt;@@ -816,14 +849,36 @@&lt;/span&gt;
      * mutex.
      */
 
&lt;span class="gi"&gt;+    printk(KERN_INFO NVKMS_LOG_PREFIX "entering nvkms_close_common, pid %d\n",
+           current-&amp;gt;pid);
+
&lt;/span&gt;     down(&amp;amp;nvkms_lock);
 
&lt;span class="gd"&gt;-    nvKmsClose(popen-&amp;gt;data);
&lt;/span&gt;&lt;span class="gi"&gt;+    printk(KERN_INFO NVKMS_LOG_PREFIX "taken lock in nvkms_close_common, pid %d\n",
+           current-&amp;gt;pid);
+
+    if (popen-&amp;gt;gpu_id != 0 &amp;amp;&amp;amp; atomic_read(popen-&amp;gt;gpu_dead) != 0) {
+        printk(KERN_ERR NVKMS_LOG_PREFIX "awwww u need cleanup :3 "
+               "in nvkms_close_common, pid %d\n",
+               current-&amp;gt;pid);
+
+        nvkms_close_gpu(popen-&amp;gt;gpu_id);
+
+        popen-&amp;gt;gpu_id = 0;
+        popen-&amp;gt;gpu_dead = NULL;
+
+        leak_on_unload = NV_TRUE;
+    } else {
+        nvKmsClose(popen-&amp;gt;data);
+    }
&lt;/span&gt; 
     popen-&amp;gt;data = NULL;
 
     up(&amp;amp;nvkms_lock);
 
&lt;span class="gi"&gt;+    printk(KERN_INFO NVKMS_LOG_PREFIX "given up lock in nvkms_close_common, pid %d\n",
+           current-&amp;gt;pid);
+
&lt;/span&gt;     if (popen-&amp;gt;type == NVKMS_CLIENT_KERNEL_SPACE) {
         /*
          * Flush any outstanding nvkms_kapi_event_kthread_q_callback() work
&lt;span class="p"&gt;@@ -844,6 +899,9 @@&lt;/span&gt;
     }
 
     nvkms_free(popen, sizeof(*popen));
&lt;span class="gi"&gt;+
+    printk(KERN_INFO NVKMS_LOG_PREFIX "exiting nvkms_close_common, pid %d\n",
+           current-&amp;gt;pid);
&lt;/span&gt; }
 
 int NVKMS_API_CALL nvkms_ioctl_common
&lt;span class="p"&gt;@@ -855,20 +913,58 @@&lt;/span&gt;
     int status;
     NvBool ret;
 
&lt;span class="gi"&gt;+    printk(KERN_INFO NVKMS_LOG_PREFIX "entering nvkms_ioctl_common, pid %d\n",
+           current-&amp;gt;pid);
+
&lt;/span&gt;     status = down_interruptible(&amp;amp;nvkms_lock);
     if (status != 0) {
         return status;
     }
 
&lt;span class="gi"&gt;+    printk(KERN_INFO NVKMS_LOG_PREFIX "taken lock in nvkms_ioctl_common, pid %d\n",
+           current-&amp;gt;pid);
+
+    if (popen-&amp;gt;gpu_id != 0 &amp;amp;&amp;amp; atomic_read(popen-&amp;gt;gpu_dead) != 0) {
+        goto dead;
+    }
+
+    clopen_gpu_id = 0;
+
&lt;/span&gt;     if (popen-&amp;gt;data != NULL) {
         ret = nvKmsIoctl(popen-&amp;gt;data, cmd, address, size);
     } else {
         ret = NV_FALSE;
     }
 
&lt;span class="gi"&gt;+    if (clopen_gpu_id != 0) {
+        if (!popen-&amp;gt;gpu_id) {
+            printk(KERN_INFO NVKMS_LOG_PREFIX "detected gpu %08x open in nvkms_ioctl_common, "
+                   "pid %d\n", clopen_gpu_id, current-&amp;gt;pid);
+            popen-&amp;gt;gpu_id = clopen_gpu_id;
+            popen-&amp;gt;gpu_dead = __rm_ops.gpu_dead(clopen_gpu_id);
+        } else {
+            printk(KERN_INFO NVKMS_LOG_PREFIX "detected gpu %08x close in nvkms_ioctl_common, "
+                   "pid %d\n", clopen_gpu_id, current-&amp;gt;pid);
+            popen-&amp;gt;gpu_id = 0;
+            popen-&amp;gt;gpu_dead = NULL;
+        }
+    }
+
&lt;/span&gt;     up(&amp;amp;nvkms_lock);
 
&lt;span class="gi"&gt;+    printk(KERN_INFO NVKMS_LOG_PREFIX "given up lock in nvkms_ioctl_common, pid %d\n",
+           current-&amp;gt;pid);
+
&lt;/span&gt;     return ret ? 0 : -EPERM;
&lt;span class="gi"&gt;+
+dead:
+    up(&amp;amp;nvkms_lock);
+
+    printk(KERN_ERR NVKMS_LOG_PREFIX "*notices ur gpu is dead* owo whats this "
+           "in nvkms_ioctl_common, pid %d\n",
+           current-&amp;gt;pid);
+
+    return -ENOENT;
&lt;/span&gt; }
 
 /*************************************************************************
&lt;span class="p"&gt;@@ -1239,9 +1335,14 @@&lt;/span&gt;
 
     nvkms_proc_exit();
 
&lt;span class="gd"&gt;-    down(&amp;amp;nvkms_lock);
-    nvKmsModuleUnload();
-    up(&amp;amp;nvkms_lock);
&lt;/span&gt;&lt;span class="gi"&gt;+    if(leak_on_unload) {
+        printk(KERN_ERR NVKMS_LOG_PREFIX "im just gonna leak all the kms junk ok? "
+               "haha nvm wasnt a question. in nvkms_exit\n");
+    } else {
+        down(&amp;amp;nvkms_lock);
+        nvKmsModuleUnload();
+        up(&amp;amp;nvkms_lock);
+    }
&lt;/span&gt; 
     /*
      * At this point, any pending tasks should be marked canceled, but
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s some handy scripts I was using while debugging it:&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;insmod.sh&lt;/figcaption&gt;&lt;pre&gt;&lt;code class="language-sh"&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;
&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh -ex&lt;/span&gt;
modprobe acpi_ipmi
insmod nvidia.ko &lt;span class="nv"&gt;NVreg_ResmanDebugLevel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;-1&lt;/span&gt; &lt;span class="nv"&gt;NVreg_CheckPCIConfigSpace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0
insmod nvidia-modeset.ko
dmesg &lt;span class="nt"&gt;-w&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure&gt;&lt;figcaption&gt;rmmod.sh&lt;/figcaption&gt;&lt;pre&gt;&lt;code class="language-sh"&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;
&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;
rmmod nvidia-modeset
rmmod nvidia
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure&gt;&lt;figcaption&gt;xorg.sh&lt;/figcaption&gt;&lt;pre&gt;&lt;code class="language-sh"&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;
&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="nb"&gt;exec &lt;/span&gt;Xorg :8 &lt;span class="nt"&gt;-config&lt;/span&gt; /etc/bumblebee/xorg.conf.nvidia &lt;span class="nt"&gt;-configdir&lt;/span&gt; /etc/bumblebee/xorg.conf.d &lt;span class="nt"&gt;-sharevts&lt;/span&gt; &lt;span class="nt"&gt;-nolisten&lt;/span&gt; tcp &lt;span class="nt"&gt;-noreset&lt;/span&gt; &lt;span class="nt"&gt;-verbose&lt;/span&gt; 3 &lt;span class="nt"&gt;-isolateDevice&lt;/span&gt; PCI:06:00:0 &lt;span class="nt"&gt;-modulepath&lt;/span&gt; /usr/lib/nvidia/nvidia,/usr/lib/xorg/modules
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And finally, here are the relevant kernel and Xorg log messages, showing what happens when a GPU is unplugged:&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;dmesg.log&lt;/figcaption&gt;&lt;pre&gt;&lt;code class="language-text"&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;
&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
&lt;/pre&gt;&lt;/td&gt;
&lt;td class="rouge-code"&gt;&lt;pre&gt;[  219.524218] NVRM: loading NVIDIA UNIX x86_64 Kernel Module  390.87  Tue Aug 21 12:33:05 PDT 2018 (using threaded interrupts)
[  219.527409] nvidia-modeset: Loading NVIDIA Kernel Mode Setting Driver for UNIX platforms  390.87  Tue Aug 21 16:16:14 PDT 2018
[  224.780721] nvidia-modeset: nvkms_open_gpu called with 00000600, pid 4560
[  224.807370] nvidia-modeset: detected gpu 00000600 open in nvkms_ioctl_common, pid 4560
[  239.061383] NVRM: GPU at PCI:0000:06:00: GPU-9fe1319c-8dd3-44e4-2b74-de93f8b02c6a
[  239.061387] NVRM: Xid (PCI:0000:06:00): 79, GPU has fallen off the bus.
[  239.061389] NVRM: GPU at 0000:06:00.0 has fallen off the bus.
[  239.061398] NVRM: A GPU crash dump has been created. If possible, please run
               NVRM: nvidia-bug-report.sh as root to collect this data before
               NVRM: the NVIDIA kernel module is unloaded.
[  240.209498] NVRM: Attempting to remove minor device 0 with non-zero usage count!
[  240.209501] NVRM: YOLO, waiting for usage count to drop to zero
[  241.433499] nvidia-modeset: *notices ur gpu is dead* owo whats this in nvkms_ioctl_common, pid 4560
[  241.433851] nvidia-modeset: awwww u need cleanup :3 in nvkms_close_common, pid 4560
[  241.433853] nvidia-modeset: nvkms_close_gpu called with 00000600, pid 4560
[  250.440498] NVRM: Usage count is now zero, proceeding to remove the GPU
[  250.440513] NVRM: This is not actually supposed to work lol. Hope it does tho 👍
[  250.440520] NVRM: You probably want to reload nvidia-modeset now if you want any of this to ever start up again, but like, man, that's your choice entirely
[  250.440870] pci 0000:06:00.1: Dropping the link to 0000:06:00.0
[  250.440950] pci_bus 0000:06: busn_res: [bus 06] is released
[  250.440982] pci_bus 0000:07: busn_res: [bus 07-38] is released
[  250.441012] pci_bus 0000:05: busn_res: [bus 05-38] is released
[  251.000794] pci_bus 0000:02: Allocating resources
[  251.001324] pci_bus 0000:02: Allocating resources
[  253.765953] pcieport 0000:00:1c.0: AER: Corrected error received: 0000:00:1c.0
[  253.765969] pcieport 0000:00:1c.0: PCIe Bus Error: severity=Corrected, type=Physical Layer, (Receiver ID)
[  253.765976] pcieport 0000:00:1c.0:   device [8086:9d10] error status/mask=00002001/00002000
[  253.765982] pcieport 0000:00:1c.0:    [ 0] Receiver Error         (First)
[  253.841064] pcieport 0000:02:02.0: Refused to change power state, currently in D3
[  253.843882] pcieport 0000:02:00.0: Refused to change power state, currently in D3
[  253.846177] pci_bus 0000:03: busn_res: [bus 03] is released
[  253.846248] pci_bus 0000:04: busn_res: [bus 04-38] is released
[  253.846300] pci_bus 0000:39: busn_res: [bus 39] is released
[  253.846348] pci_bus 0000:02: busn_res: [bus 02-39] is released
[  353.369487] nvidia-modeset: im just gonna leak all the kms junk ok? haha nvm wasnt a question. in nvkms_exit
[  357.600350] nvidia-modeset: Loading NVIDIA Kernel Mode Setting Driver for UNIX platforms  390.87  Tue Aug 21 16:16:14 PDT 2018
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure&gt;&lt;figcaption&gt;Xorg.8.log&lt;/figcaption&gt;&lt;pre&gt;&lt;code class="language-text"&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;
&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
&lt;/pre&gt;&lt;/td&gt;
&lt;td class="rouge-code"&gt;&lt;pre&gt;[   244.798] (EE) NVIDIA(GPU-0): WAIT (2, 8, 0x8000, 0x000011f4, 0x00001210)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</content>
    <summary type="html">&lt;p&gt;Recently, I’ve using an extremely cursed setup where my XPS 13 9360 laptop is connected to a Sonnet EchoExpress 2 box rewired for Thunderbolt 3 that has an nVidia Quadro 600 GPU, and Linux is set up for render offload to the eGPU and then frame transfer back to iGPU to be displayed on the laptop’s integrated display, which (to my sheer surprise) not only works quire reliably, but even gives me higher FPS in Team Fortress 2 than the iGPU.&lt;/p&gt;

&lt;p&gt;There’s only really one downside: if the eGPU falls off the bus, either because someone™ pulled out the cable, or because the stars didn’t align quite right this morning and it decided to enumerate seemingly at random (sometimes this is preceeded by whining from PCIe AER, sometimes not, I &lt;em&gt;think&lt;/em&gt; it’s some sort of hardware issue like a badly inserted PCIe card, but I’m not entirely sure), the nVidia driver… hangs. Hangs quite deliberately, as the sources to the kernel driver show. This leaves the Xorg instance bound to the eGPU hung forever (which confuses bumblebee, but is otherwise not especially bad), and also prevents any new ones from using the eGPU (which is bad).&lt;/p&gt;

&lt;p&gt;Anyway, I was kind of annoyed of rebooting every time it happens, so I decided to reboot a few more dozen times instead while patching the driver. This has indeed worked, and left me with something similar to a functional hot-unplug, mildly crippled by the fact that nvidia-modeset is a completely opaque blob that keeps some internal state and tries to act on it, getting stuck when it tries to do something to the now-missing eGPU.&lt;/p&gt;

&lt;p&gt;Turns out, there are only a few issues preventing functional hot-unplug.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In &lt;code&gt;nvidia_remove&lt;/code&gt;, the driver actually checks if anyone’s still trying to use it, and if yes, it tries to just hang the removal process. This doesn’t actually work, or rather, it mostly works by accident. It starts an infinite loop calling &lt;code&gt;os_schedule()&lt;/code&gt; while having taken the &lt;code&gt;NV_LINUX_DEVICES&lt;/code&gt; lock. While in the default configuration this indeed hangs any reentrant requests into the driver by virtue of &lt;code&gt;NV_CHECK_PCI_CONFIG_SPACE&lt;/code&gt; taking the same lock (in &lt;code&gt;verify_pci_bars&lt;/code&gt;, passing the &lt;code&gt;NVreg_CheckPCIConfigSpace=0&lt;/code&gt; module option eliminates that accidental safety mechanism, and allows reentrant requests to proceed. They do not crash due to memory being deallocated in &lt;code&gt;nvidia_remove&lt;/code&gt; (so you don’t get an unhandled kernel page fault), but they still crash due to being unable to access the GPU.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The NVKMS component (in the &lt;code&gt;nvidia-modeset&lt;/code&gt; module) tries to maintain some state, and change it when e.g. the Xorg instance quits and closes the &lt;code&gt;/dev/nvidia-modeset&lt;/code&gt; file. Unfortunately, it does not expect the GPU to go away, and first spews a few messages to &lt;code&gt;dmesg&lt;/code&gt; similar to &lt;code&gt;nvidia-modeset: ERROR: GPU:0: Failed to query display engine channel state: 0x0000857d:0:0:0x0000000f&lt;/code&gt;, after which it appears to hang somewhere inside the blob, which has been conveniently stripped of all symbols. This needs to be prevented, but…&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The NVKMS component effectively only exposes a single opaque ioctl, and all the communication, including communication of the GPU bus ID, happens out of band with regards to the open source parts of the &lt;code&gt;nvidia-modeset&lt;/code&gt; module. Fortunately, NVKMS calls back into NVRM, and this allows us to associate each &lt;code&gt;/dev/nvidia-modeset&lt;/code&gt; fd with the GPU bus ID.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When unloading NVKMS, it also tries to act on its internal state and change the GPU state, which leads to the same hang.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All in all, this allows a patch to be written that detects when a GPU goes away, ignores all further NVKMS requests related to that specific GPU (and returns &lt;code&gt;-ENOENT&lt;/code&gt; in response to ioctls, which Xorg appropriately interprets as a fault condition), correctly releases the resources by requesting NVRM, and improperly unloads NVKMS so it doesn’t try to reset the GPU state. (All actual resources should be released by this point, and NVKMS doesn’t have any resource allocation callbacks other than those we already intercept, so &lt;em&gt;in theory&lt;/em&gt; this doesn’t have any bad consequences. But I’m not working for nVidia, so this might be completely wrong.)&lt;/p&gt;

&lt;p&gt;After the GPU is plugged back in, NVKMS will try to act on its internal state again; in this case, it doesn’t hang, but it doesn’t initialize the GPU correctly either, so the &lt;code&gt;nvidia-modeset&lt;/code&gt; kernel module has to be (manually) reloaded. It’s not easy to do this automatically because in a hypothetical system with more than one nVidia GPU the module would still be in use when one of them dies, and so just hard reloading NVKMS would have unfortunate consequences. (Though, I don’t really know whether NVKMS would try to access the dead GPU in response to the request acting on the other GPU anyway. I decided to do it conservatively.) Once it’s reloaded you’re back in the game though!&lt;/p&gt;

&lt;p&gt;Here’s the patch, written against the &lt;code&gt;nvidia-legacy-390xx-390.87&lt;/code&gt; Debian source package:&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;nvidia-hot-gpu-on-gpu-unplug-action.patch (&lt;a href="/files/nvidia-hot-gpu-on-gpu-unplug-action.patch"&gt;download&lt;/a&gt;)&lt;/figcaption&gt;&lt;pre&gt;&lt;code class="language-diff"&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;
&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
&lt;/pre&gt;&lt;/td&gt;
&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="gh"&gt;diff -ur original/common/inc/nv-linux.h patchedl/common/inc/nv-linux.h
&lt;/span&gt;&lt;span class="gd"&gt;--- original/common/inc/nv-linux.h	2018-09-23 12:20:02.000000000 +0000
&lt;/span&gt;&lt;span class="gi"&gt;+++ patched/common/inc/nv-linux.h	2018-10-28 07:19:21.526566940 +0000
&lt;/span&gt;&lt;span class="p"&gt;@@ -1465,6 +1465,7 @@&lt;/span&gt;
 typedef struct nv_linux_state_s {
     nv_state_t nv_state;
     atomic_t usage_count;
&lt;span class="gi"&gt;+    atomic_t dead;
&lt;/span&gt; 
     struct pci_dev *dev;
 
&lt;span class="gh"&gt;diff -ur original/common/inc/nv-modeset-interface.h patched/common/inc/nv-modeset-interface.h
&lt;/span&gt;&lt;span class="gd"&gt;--- original/common/inc/nv-modeset-interface.h	2018-08-22 00:55:23.000000000 +0000
&lt;/span&gt;&lt;span class="gi"&gt;+++ patched/common/inc/nv-modeset-interface.h	2018-10-28 07:22:00.768238371 +0000
&lt;/span&gt;&lt;span class="p"&gt;@@ -25,6 +25,8 @@&lt;/span&gt;
 
 #include "nv-gpu-info.h"
 
&lt;span class="gi"&gt;+#include &amp;lt;asm/atomic.h&amp;gt;
+
&lt;/span&gt; /*
  * nvidia_modeset_rm_ops_t::op gets assigned a function pointer from
  * core RM, which uses the calling convention of arguments on the
&lt;span class="p"&gt;@@ -115,6 +117,8 @@&lt;/span&gt;
 
     int (*set_callbacks)(const nvidia_modeset_callbacks_t *cb);
 
&lt;span class="gi"&gt;+    atomic_t * (*gpu_dead)(NvU32 gpu_id);
+
&lt;/span&gt; } nvidia_modeset_rm_ops_t;
 
 NV_STATUS nvidia_get_rm_ops(nvidia_modeset_rm_ops_t *rm_ops);
&lt;span class="gh"&gt;diff -ur original/common/inc/nv-proto.h patched/common/inc/nv-proto.h
&lt;/span&gt;&lt;span class="gd"&gt;--- original/common/inc/nv-proto.h	2018-08-22 00:55:23.000000000 +0000
&lt;/span&gt;&lt;span class="gi"&gt;+++ patched/common/inc/nv-proto.h	2018-10-28 07:20:49.939494812 +0000
&lt;/span&gt;&lt;span class="p"&gt;@@ -81,6 +81,7 @@&lt;/span&gt;
 NvBool      nvidia_get_gpuid_list       (NvU32 *gpu_ids, NvU32 *gpu_count);
 int         nvidia_dev_get              (NvU32, nvidia_stack_t *);
 void        nvidia_dev_put              (NvU32, nvidia_stack_t *);
&lt;span class="gi"&gt;+atomic_t *  nvidia_dev_dead             (NvU32);
&lt;/span&gt; int         nvidia_dev_get_uuid         (const NvU8 *, nvidia_stack_t *);
 void        nvidia_dev_put_uuid         (const NvU8 *, nvidia_stack_t *);
 int         nvidia_dev_get_pci_info     (const NvU8 *, struct pci_dev **, NvU64 *, NvU64 *);
&lt;span class="gh"&gt;diff -ur original/nvidia/nv.c patched/nvidia/nv.c
&lt;/span&gt;&lt;span class="gd"&gt;--- original/nvidia/nv.c	2018-09-23 12:20:02.000000000 +0000
&lt;/span&gt;&lt;span class="gi"&gt;+++ patched/nvidia/nv.c	2018-10-28 07:48:05.895025112 +0000
&lt;/span&gt;&lt;span class="p"&gt;@@ -1944,6 +1944,12 @@&lt;/span&gt;
     unsigned int i;
     NvBool bRemove = NV_FALSE;
 
&lt;span class="gi"&gt;+    if (NV_ATOMIC_READ(nvl-&amp;gt;dead))
+    {
+        nv_printf(NV_DBG_ERRORS, "NVRM: nvidia_close called on dead device by pid %d!\n",
+                  current-&amp;gt;pid);
+    }
+
&lt;/span&gt;     NV_CHECK_PCI_CONFIG_SPACE(sp, nv, TRUE, TRUE, NV_MAY_SLEEP());
 
     /* for control device, just jump to its open routine */
&lt;span class="p"&gt;@@ -2106,6 +2112,12 @@&lt;/span&gt;
     size_t arg_size;
     int arg_cmd;
 
&lt;span class="gi"&gt;+    if (NV_ATOMIC_READ(nvl-&amp;gt;dead))
+    {
+        nv_printf(NV_DBG_ERRORS, "NVRM: nvidia_ioctl called on dead device by pid %d!\n",
+                  current-&amp;gt;pid);
+    }
+
&lt;/span&gt;     nv_printf(NV_DBG_INFO, "NVRM: ioctl(0x%x, 0x%x, 0x%x)\n",
         _IOC_NR(cmd), (unsigned int) i_arg, _IOC_SIZE(cmd));
 
&lt;span class="p"&gt;@@ -3217,6 +3229,7 @@&lt;/span&gt;
     NV_INIT_MUTEX(&amp;amp;nvl-&amp;gt;ldata_lock);
 
     NV_ATOMIC_SET(nvl-&amp;gt;usage_count, 0);
&lt;span class="gi"&gt;+    NV_ATOMIC_SET(nvl-&amp;gt;dead, 0);
&lt;/span&gt; 
     if (!rm_init_event_locks(sp, nv))
         return NV_FALSE;
&lt;span class="p"&gt;@@ -4018,14 +4031,38 @@&lt;/span&gt;
         nv_printf(NV_DBG_ERRORS,
                   "NVRM: Attempting to remove minor device %u with non-zero usage count!\n",
                   nvl-&amp;gt;minor_num);
&lt;span class="gi"&gt;+        nv_printf(NV_DBG_ERRORS,
+                  "NVRM: YOLO, waiting for usage count to drop to zero\n");
&lt;/span&gt;         WARN_ON(1);
 
&lt;span class="gd"&gt;-        /* We can't continue without corrupting state, so just hang to give the
-         * user some chance to do something about this before reboot */
-        while (1)
&lt;/span&gt;&lt;span class="gi"&gt;+        NV_ATOMIC_SET(nvl-&amp;gt;dead, 1);
+
+        /* Insanity check: wait until all clients die, then hope for the best. */
+        while (1) {
+            UNLOCK_NV_LINUX_DEVICES();
&lt;/span&gt;             os_schedule();
&lt;span class="gd"&gt;-    }
&lt;/span&gt;&lt;span class="gi"&gt;+            LOCK_NV_LINUX_DEVICES();
+
+            nvl = pci_get_drvdata(dev);
+            if (!nvl || (nvl-&amp;gt;dev != dev))
+            {
+                goto done;
+            }
+
+            if (NV_ATOMIC_READ(nvl-&amp;gt;usage_count) == 0)
+            {
+                break;
+            }
+        }
&lt;/span&gt; 
&lt;span class="gi"&gt;+        nv_printf(NV_DBG_ERRORS,
+                  "NVRM: Usage count is now zero, proceeding to remove the GPU\n");
+        nv_printf(NV_DBG_ERRORS,
+                  "NVRM: This is not actually supposed to work lol. Hope it does tho 👍\n");
+        nv_printf(NV_DBG_ERRORS,
+                  "NVRM: You probably want to reload nvidia-modeset now if you want any "
+                  "of this to ever start up again, but like, man, that's your choice entirely\n");
+    }
&lt;/span&gt;     nv = NV_STATE_PTR(nvl);
     if (nvl == nv_linux_devices)
         nv_linux_devices = nvl-&amp;gt;next;
&lt;span class="p"&gt;@@ -4712,6 +4749,22 @@&lt;/span&gt;
     up(&amp;amp;nvl-&amp;gt;ldata_lock);
 }
 
&lt;span class="gi"&gt;+atomic_t *nvidia_dev_dead(NvU32 gpu_id)
+{
+    nv_linux_state_t *nvl;
+    atomic_t *ret;
+
+    /* Takes nvl-&amp;gt;ldata_lock */
+    nvl = find_gpu_id(gpu_id);
+    if (!nvl)
+        return NV_FALSE;
+
+    ret = &amp;amp;nvl-&amp;gt;dead;
+    up(&amp;amp;nvl-&amp;gt;ldata_lock);
+
+    return ret;
+}
+
&lt;/span&gt; /*
  * Like nvidia_dev_get but uses UUID instead of gpu_id. Note that this may
  * trigger initialization and teardown of unrelated devices to look up their
&lt;span class="gh"&gt;diff -ur original/nvidia/nv-modeset-interface.c patched/nvidia/nv-modeset-interface.c
&lt;/span&gt;&lt;span class="gd"&gt;--- original/nvidia/nv-modeset-interface.c	2018-08-22 00:55:22.000000000 +0000
&lt;/span&gt;&lt;span class="gi"&gt;+++ patched/nvidia/nv-modeset-interface.c	2018-10-28 07:20:25.959243110 +0000
&lt;/span&gt;&lt;span class="p"&gt;@@ -114,6 +114,7 @@&lt;/span&gt;
         .close_gpu      = nvidia_dev_put,
         .op             = rm_kernel_rmapi_op, /* provided by nv-kernel.o */
         .set_callbacks  = nvidia_modeset_set_callbacks,
&lt;span class="gi"&gt;+        .gpu_dead       = nvidia_dev_dead,
&lt;/span&gt;     };
 
     if (strcmp(rm_ops-&amp;gt;version_string, NV_VERSION_STRING) != 0)
&lt;span class="gh"&gt;diff -ur original/nvidia/nv-reg.h patched/nvidia/nv-reg.h
diff -ur original/nvidia-modeset/nvidia-modeset-linux.c patched/nvidia-modeset/nvidia-modeset-linux.c
&lt;/span&gt;&lt;span class="gd"&gt;--- original/nvidia-modeset/nvidia-modeset-linux.c	2018-09-23 12:20:02.000000000 +0000
&lt;/span&gt;&lt;span class="gi"&gt;+++ patched/nvidia-modeset/nvidia-modeset-linux.c	2018-10-28 07:47:14.738703417 +0000
&lt;/span&gt;&lt;span class="p"&gt;@@ -75,6 +75,9 @@&lt;/span&gt;
 
 static struct semaphore nvkms_lock;
 
&lt;span class="gi"&gt;+static NvU32 clopen_gpu_id;
+static NvBool leak_on_unload;
+
&lt;/span&gt; /*************************************************************************
  * NVKMS executes queued work items on a single kthread.
  *************************************************************************/
&lt;span class="p"&gt;@@ -89,6 +92,9 @@&lt;/span&gt;
 struct nvkms_per_open {
     void *data;
 
&lt;span class="gi"&gt;+    NvU32 gpu_id;
+    atomic_t *gpu_dead;
+
&lt;/span&gt;     enum NvKmsClientType type;
 
     union {
&lt;span class="p"&gt;@@ -711,6 +717,9 @@&lt;/span&gt;
     nvidia_modeset_stack_ptr stack = NULL;
     NvBool ret;
 
&lt;span class="gi"&gt;+    printk(KERN_INFO NVKMS_LOG_PREFIX "nvkms_open_gpu called with %08x, pid %d\n",
+           gpuId, current-&amp;gt;pid);
+
&lt;/span&gt;     if (__rm_ops.alloc_stack(&amp;amp;stack) != 0) {
         return NV_FALSE;
     }
&lt;span class="p"&gt;@@ -719,6 +728,10 @@&lt;/span&gt;
 
     __rm_ops.free_stack(stack);
 
&lt;span class="gi"&gt;+    if (ret) {
+        clopen_gpu_id = gpuId;
+    }
+
&lt;/span&gt;     return ret;
 }
 
&lt;span class="p"&gt;@@ -726,12 +739,17 @@&lt;/span&gt;
 {
     nvidia_modeset_stack_ptr stack = NULL;
 
&lt;span class="gi"&gt;+    printk(KERN_INFO NVKMS_LOG_PREFIX "nvkms_close_gpu called with %08x, pid %d\n",
+           gpuId, current-&amp;gt;pid);
+
&lt;/span&gt;     if (__rm_ops.alloc_stack(&amp;amp;stack) != 0) {
         return;
     }
 
     __rm_ops.close_gpu(gpuId, stack);
 
&lt;span class="gi"&gt;+    clopen_gpu_id = gpuId;
+
&lt;/span&gt;     __rm_ops.free_stack(stack);
 }
 
&lt;span class="p"&gt;@@ -771,8 +789,14 @@&lt;/span&gt;
 
     popen-&amp;gt;type = type;
 
&lt;span class="gi"&gt;+    printk(KERN_INFO NVKMS_LOG_PREFIX "entering nvkms_open_common, pid %d\n",
+           current-&amp;gt;pid);
+
&lt;/span&gt;     *status = down_interruptible(&amp;amp;nvkms_lock);
 
&lt;span class="gi"&gt;+    printk(KERN_INFO NVKMS_LOG_PREFIX "taken lock in nvkms_open_common, pid %d\n",
+           current-&amp;gt;pid);
+
&lt;/span&gt;     if (*status != 0) {
         goto failed;
     }
&lt;span class="p"&gt;@@ -781,6 +805,9 @@&lt;/span&gt;
 
     up(&amp;amp;nvkms_lock);
 
&lt;span class="gi"&gt;+    printk(KERN_INFO NVKMS_LOG_PREFIX "given up lock in nvkms_open_common, pid %d\n",
+           current-&amp;gt;pid);
+
&lt;/span&gt;     if (popen-&amp;gt;data == NULL) {
         *status = -EPERM;
         goto failed;
&lt;span class="p"&gt;@@ -799,10 +826,16 @@&lt;/span&gt;
 
     *status = 0;
 
&lt;span class="gi"&gt;+    printk(KERN_INFO NVKMS_LOG_PREFIX "exiting in nvkms_open_common, pid %d\n",
+           current-&amp;gt;pid);
+
&lt;/span&gt;     return popen;
 
 failed:
 
&lt;span class="gi"&gt;+    printk(KERN_INFO NVKMS_LOG_PREFIX "error in nvkms_open_common, pid %d\n",
+           current-&amp;gt;pid);
+
&lt;/span&gt;     nvkms_free(popen, sizeof(*popen));
 
     return NULL;
&lt;span class="p"&gt;@@ -816,14 +849,36 @@&lt;/span&gt;
      * mutex.
      */
 
&lt;span class="gi"&gt;+    printk(KERN_INFO NVKMS_LOG_PREFIX "entering nvkms_close_common, pid %d\n",
+           current-&amp;gt;pid);
+
&lt;/span&gt;     down(&amp;amp;nvkms_lock);
 
&lt;span class="gd"&gt;-    nvKmsClose(popen-&amp;gt;data);
&lt;/span&gt;&lt;span class="gi"&gt;+    printk(KERN_INFO NVKMS_LOG_PREFIX "taken lock in nvkms_close_common, pid %d\n",
+           current-&amp;gt;pid);
+
+    if (popen-&amp;gt;gpu_id != 0 &amp;amp;&amp;amp; atomic_read(popen-&amp;gt;gpu_dead) != 0) {
+        printk(KERN_ERR NVKMS_LOG_PREFIX "awwww u need cleanup :3 "
+               "in nvkms_close_common, pid %d\n",
+               current-&amp;gt;pid);
+
+        nvkms_close_gpu(popen-&amp;gt;gpu_id);
+
+        popen-&amp;gt;gpu_id = 0;
+        popen-&amp;gt;gpu_dead = NULL;
+
+        leak_on_unload = NV_TRUE;
+    } else {
+        nvKmsClose(popen-&amp;gt;data);
+    }
&lt;/span&gt; 
     popen-&amp;gt;data = NULL;
 
     up(&amp;amp;nvkms_lock);
 
&lt;span class="gi"&gt;+    printk(KERN_INFO NVKMS_LOG_PREFIX "given up lock in nvkms_close_common, pid %d\n",
+           current-&amp;gt;pid);
+
&lt;/span&gt;     if (popen-&amp;gt;type == NVKMS_CLIENT_KERNEL_SPACE) {
         /*
          * Flush any outstanding nvkms_kapi_event_kthread_q_callback() work
&lt;span class="p"&gt;@@ -844,6 +899,9 @@&lt;/span&gt;
     }
 
     nvkms_free(popen, sizeof(*popen));
&lt;span class="gi"&gt;+
+    printk(KERN_INFO NVKMS_LOG_PREFIX "exiting nvkms_close_common, pid %d\n",
+           current-&amp;gt;pid);
&lt;/span&gt; }
 
 int NVKMS_API_CALL nvkms_ioctl_common
&lt;span class="p"&gt;@@ -855,20 +913,58 @@&lt;/span&gt;
     int status;
     NvBool ret;
 
&lt;span class="gi"&gt;+    printk(KERN_INFO NVKMS_LOG_PREFIX "entering nvkms_ioctl_common, pid %d\n",
+           current-&amp;gt;pid);
+
&lt;/span&gt;     status = down_interruptible(&amp;amp;nvkms_lock);
     if (status != 0) {
         return status;
     }
 
&lt;span class="gi"&gt;+    printk(KERN_INFO NVKMS_LOG_PREFIX "taken lock in nvkms_ioctl_common, pid %d\n",
+           current-&amp;gt;pid);
+
+    if (popen-&amp;gt;gpu_id != 0 &amp;amp;&amp;amp; atomic_read(popen-&amp;gt;gpu_dead) != 0) {
+        goto dead;
+    }
+
+    clopen_gpu_id = 0;
+
&lt;/span&gt;     if (popen-&amp;gt;data != NULL) {
         ret = nvKmsIoctl(popen-&amp;gt;data, cmd, address, size);
     } else {
         ret = NV_FALSE;
     }
 
&lt;span class="gi"&gt;+    if (clopen_gpu_id != 0) {
+        if (!popen-&amp;gt;gpu_id) {
+            printk(KERN_INFO NVKMS_LOG_PREFIX "detected gpu %08x open in nvkms_ioctl_common, "
+                   "pid %d\n", clopen_gpu_id, current-&amp;gt;pid);
+            popen-&amp;gt;gpu_id = clopen_gpu_id;
+            popen-&amp;gt;gpu_dead = __rm_ops.gpu_dead(clopen_gpu_id);
+        } else {
+            printk(KERN_INFO NVKMS_LOG_PREFIX "detected gpu %08x close in nvkms_ioctl_common, "
+                   "pid %d\n", clopen_gpu_id, current-&amp;gt;pid);
+            popen-&amp;gt;gpu_id = 0;
+            popen-&amp;gt;gpu_dead = NULL;
+        }
+    }
+
&lt;/span&gt;     up(&amp;amp;nvkms_lock);
 
&lt;span class="gi"&gt;+    printk(KERN_INFO NVKMS_LOG_PREFIX "given up lock in nvkms_ioctl_common, pid %d\n",
+           current-&amp;gt;pid);
+
&lt;/span&gt;     return ret ? 0 : -EPERM;
&lt;span class="gi"&gt;+
+dead:
+    up(&amp;amp;nvkms_lock);
+
+    printk(KERN_ERR NVKMS_LOG_PREFIX "*notices ur gpu is dead* owo whats this "
+           "in nvkms_ioctl_common, pid %d\n",
+           current-&amp;gt;pid);
+
+    return -ENOENT;
&lt;/span&gt; }
 
 /*************************************************************************
&lt;span class="p"&gt;@@ -1239,9 +1335,14 @@&lt;/span&gt;
 
     nvkms_proc_exit();
 
&lt;span class="gd"&gt;-    down(&amp;amp;nvkms_lock);
-    nvKmsModuleUnload();
-    up(&amp;amp;nvkms_lock);
&lt;/span&gt;&lt;span class="gi"&gt;+    if(leak_on_unload) {
+        printk(KERN_ERR NVKMS_LOG_PREFIX "im just gonna leak all the kms junk ok? "
+               "haha nvm wasnt a question. in nvkms_exit\n");
+    } else {
+        down(&amp;amp;nvkms_lock);
+        nvKmsModuleUnload();
+        up(&amp;amp;nvkms_lock);
+    }
&lt;/span&gt; 
     /*
      * At this point, any pending tasks should be marked canceled, but
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s some handy scripts I was using while debugging it:&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;insmod.sh&lt;/figcaption&gt;&lt;pre&gt;&lt;code class="language-sh"&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;
&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh -ex&lt;/span&gt;
modprobe acpi_ipmi
insmod nvidia.ko &lt;span class="nv"&gt;NVreg_ResmanDebugLevel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;-1&lt;/span&gt; &lt;span class="nv"&gt;NVreg_CheckPCIConfigSpace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0
insmod nvidia-modeset.ko
dmesg &lt;span class="nt"&gt;-w&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure&gt;&lt;figcaption&gt;rmmod.sh&lt;/figcaption&gt;&lt;pre&gt;&lt;code class="language-sh"&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;
&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;
rmmod nvidia-modeset
rmmod nvidia
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure&gt;&lt;figcaption&gt;xorg.sh&lt;/figcaption&gt;&lt;pre&gt;&lt;code class="language-sh"&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;
&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="nb"&gt;exec &lt;/span&gt;Xorg :8 &lt;span class="nt"&gt;-config&lt;/span&gt; /etc/bumblebee/xorg.conf.nvidia &lt;span class="nt"&gt;-configdir&lt;/span&gt; /etc/bumblebee/xorg.conf.d &lt;span class="nt"&gt;-sharevts&lt;/span&gt; &lt;span class="nt"&gt;-nolisten&lt;/span&gt; tcp &lt;span class="nt"&gt;-noreset&lt;/span&gt; &lt;span class="nt"&gt;-verbose&lt;/span&gt; 3 &lt;span class="nt"&gt;-isolateDevice&lt;/span&gt; PCI:06:00:0 &lt;span class="nt"&gt;-modulepath&lt;/span&gt; /usr/lib/nvidia/nvidia,/usr/lib/xorg/modules
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And finally, here are the relevant kernel and Xorg log messages, showing what happens when a GPU is unplugged:&lt;/p&gt;

&lt;figure&gt;&lt;figcaption&gt;dmesg.log&lt;/figcaption&gt;&lt;pre&gt;&lt;code class="language-text"&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;
&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
&lt;/pre&gt;&lt;/td&gt;
&lt;td class="rouge-code"&gt;&lt;pre&gt;[  219.524218] NVRM: loading NVIDIA UNIX x86_64 Kernel Module  390.87  Tue Aug 21 12:33:05 PDT 2018 (using threaded interrupts)
[  219.527409] nvidia-modeset: Loading NVIDIA Kernel Mode Setting Driver for UNIX platforms  390.87  Tue Aug 21 16:16:14 PDT 2018
[  224.780721] nvidia-modeset: nvkms_open_gpu called with 00000600, pid 4560
[  224.807370] nvidia-modeset: detected gpu 00000600 open in nvkms_ioctl_common, pid 4560
[  239.061383] NVRM: GPU at PCI:0000:06:00: GPU-9fe1319c-8dd3-44e4-2b74-de93f8b02c6a
[  239.061387] NVRM: Xid (PCI:0000:06:00): 79, GPU has fallen off the bus.
[  239.061389] NVRM: GPU at 0000:06:00.0 has fallen off the bus.
[  239.061398] NVRM: A GPU crash dump has been created. If possible, please run
               NVRM: nvidia-bug-report.sh as root to collect this data before
               NVRM: the NVIDIA kernel module is unloaded.
[  240.209498] NVRM: Attempting to remove minor device 0 with non-zero usage count!
[  240.209501] NVRM: YOLO, waiting for usage count to drop to zero
[  241.433499] nvidia-modeset: *notices ur gpu is dead* owo whats this in nvkms_ioctl_common, pid 4560
[  241.433851] nvidia-modeset: awwww u need cleanup :3 in nvkms_close_common, pid 4560
[  241.433853] nvidia-modeset: nvkms_close_gpu called with 00000600, pid 4560
[  250.440498] NVRM: Usage count is now zero, proceeding to remove the GPU
[  250.440513] NVRM: This is not actually supposed to work lol. Hope it does tho 👍
[  250.440520] NVRM: You probably want to reload nvidia-modeset now if you want any of this to ever start up again, but like, man, that's your choice entirely
[  250.440870] pci 0000:06:00.1: Dropping the link to 0000:06:00.0
[  250.440950] pci_bus 0000:06: busn_res: [bus 06] is released
[  250.440982] pci_bus 0000:07: busn_res: [bus 07-38] is released
[  250.441012] pci_bus 0000:05: busn_res: [bus 05-38] is released
[  251.000794] pci_bus 0000:02: Allocating resources
[  251.001324] pci_bus 0000:02: Allocating resources
[  253.765953] pcieport 0000:00:1c.0: AER: Corrected error received: 0000:00:1c.0
[  253.765969] pcieport 0000:00:1c.0: PCIe Bus Error: severity=Corrected, type=Physical Layer, (Receiver ID)
[  253.765976] pcieport 0000:00:1c.0:   device [8086:9d10] error status/mask=00002001/00002000
[  253.765982] pcieport 0000:00:1c.0:    [ 0] Receiver Error         (First)
[  253.841064] pcieport 0000:02:02.0: Refused to change power state, currently in D3
[  253.843882] pcieport 0000:02:00.0: Refused to change power state, currently in D3
[  253.846177] pci_bus 0000:03: busn_res: [bus 03] is released
[  253.846248] pci_bus 0000:04: busn_res: [bus 04-38] is released
[  253.846300] pci_bus 0000:39: busn_res: [bus 39] is released
[  253.846348] pci_bus 0000:02: busn_res: [bus 02-39] is released
[  353.369487] nvidia-modeset: im just gonna leak all the kms junk ok? haha nvm wasnt a question. in nvkms_exit
[  357.600350] nvidia-modeset: Loading NVIDIA Kernel Mode Setting Driver for UNIX platforms  390.87  Tue Aug 21 16:16:14 PDT 2018
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure&gt;&lt;figcaption&gt;Xorg.8.log&lt;/figcaption&gt;&lt;pre&gt;&lt;code class="language-text"&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;
&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
&lt;/pre&gt;&lt;/td&gt;
&lt;td class="rouge-code"&gt;&lt;pre&gt;[   244.798] (EE) NVIDIA(GPU-0): WAIT (2, 8, 0x8000, 0x000011f4, 0x00001210)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</summary>
  </entry>
  <entry>
    <id>tag:lab.whitequark.org,2018-09-17:/notes/2018-09-17/game-boy-advance-cartridge-smc805-2/</id>
    <title type="html">Game Boy Advance cartridge "SMC805-2 VER:1.5"</title>
    <published>2018-09-17T11:02:33Z</published>
    <updated>2018-09-17T11:02:33Z</updated>
    <link rel="alternate" href="https://lab.whitequark.org/notes/2018-09-17/game-boy-advance-cartridge-smc805-2/" type="text/html"/>
    <content type="html">&lt;p&gt;I have been asked to determine if a (pirate) Game Boy Advance cartridge with the PCB marked “SMC805-2 VER:1.5 2006.11.16” can be reflashed. The cartridge contains a battery, an ASIC in a chip-on-board package (epoxy blob), an unidentified Intel chip marked “RL0ZAA00” (possibly “RLOZAA00” or “RLOZAAOO”) “A5367952” “Z37LA59B” in a VFBGA-56 package, an ISSI (neé ICSI) static RAM &lt;a href="/files/gba-cartridge/IS62LV1024.pdf"&gt;IS62LV1024LL-55H&lt;/a&gt; in a TSOP-32 package, and miscellaneous passives.&lt;/p&gt;

&lt;p&gt;Front side of the board with the cartridge pins annotated (&lt;a href="/images/gba-cartridge/labelled.svg"&gt;zoomable version&lt;/a&gt;):&lt;/p&gt;

&lt;object type="image/svg+xml" data="/images/gba-cartridge/labelled.svg"&gt;&lt;/object&gt;

&lt;p&gt;It was immediately clear that the Intel chip has to be a Flash, it has a parallel interface, and by looking at it at a shallow angle to the PCB, it could be seen that the balls are laid out in a 7x8 grid. It was then a matter of a search query to discover that an Intel parallel flash in a BGA-56 package belongs to the 28F series, similar to &lt;a href="/files/gba-cartridge/28F128.pdf"&gt;28F128Kxx&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After desoldering the chip, I have traced the test points to the balls they are connected to, and the pinout matched the 28F series perfectly. Test point assignment (&lt;a href="/images/gba-cartridge/labelled-mag.svg"&gt;zoomable version&lt;/a&gt;):&lt;/p&gt;

&lt;object type="image/svg+xml" data="/images/gba-cartridge/labelled-mag.svg"&gt;&lt;/object&gt;

&lt;p&gt;Note that the Flash interface is completely independent from the cartridge interface; every Flash interface data signal goes through the ASIC.&lt;/p&gt;

&lt;p&gt;It is not clear if the Flash interface is tristated by the ASIC when not in use, or by some other method, such as the J1-J2 switch.&lt;/p&gt;
</content>
    <summary type="html">&lt;p&gt;I have been asked to determine if a (pirate) Game Boy Advance cartridge with the PCB marked “SMC805-2 VER:1.5 2006.11.16” can be reflashed. The cartridge contains a battery, an ASIC in a chip-on-board package (epoxy blob), an unidentified Intel chip marked “RL0ZAA00” (possibly “RLOZAA00” or “RLOZAAOO”) “A5367952” “Z37LA59B” in a VFBGA-56 package, an ISSI (neé ICSI) static RAM &lt;a href="/files/gba-cartridge/IS62LV1024.pdf"&gt;IS62LV1024LL-55H&lt;/a&gt; in a TSOP-32 package, and miscellaneous passives.&lt;/p&gt;

&lt;p&gt;Front side of the board with the cartridge pins annotated (&lt;a href="/images/gba-cartridge/labelled.svg"&gt;zoomable version&lt;/a&gt;):&lt;/p&gt;

&lt;object type="image/svg+xml" data="/images/gba-cartridge/labelled.svg"&gt;&lt;/object&gt;

&lt;p&gt;It was immediately clear that the Intel chip has to be a Flash, it has a parallel interface, and by looking at it at a shallow angle to the PCB, it could be seen that the balls are laid out in a 7x8 grid. It was then a matter of a search query to discover that an Intel parallel flash in a BGA-56 package belongs to the 28F series, similar to &lt;a href="/files/gba-cartridge/28F128.pdf"&gt;28F128Kxx&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After desoldering the chip, I have traced the test points to the balls they are connected to, and the pinout matched the 28F series perfectly. Test point assignment (&lt;a href="/images/gba-cartridge/labelled-mag.svg"&gt;zoomable version&lt;/a&gt;):&lt;/p&gt;

&lt;object type="image/svg+xml" data="/images/gba-cartridge/labelled-mag.svg"&gt;&lt;/object&gt;

&lt;p&gt;Note that the Flash interface is completely independent from the cartridge interface; every Flash interface data signal goes through the ASIC.&lt;/p&gt;

&lt;p&gt;It is not clear if the Flash interface is tristated by the ASIC when not in use, or by some other method, such as the J1-J2 switch.&lt;/p&gt;
</summary>
  </entry>
  <entry>
    <id>tag:lab.whitequark.org,2018-08-02:/notes/2018-08-02/z144sn005-lcd-microphotography/</id>
    <title type="html">Z144SN005 LCD microphotography</title>
    <published>2018-08-02T05:50:10Z</published>
    <updated>2018-08-02T05:50:10Z</updated>
    <link rel="alternate" href="https://lab.whitequark.org/notes/2018-08-02/z144sn005-lcd-microphotography/" type="text/html"/>
    <content type="html">&lt;p&gt;I’ve been provided a Z144SN005 LCD that has split in halves as a result of excess mechanical force. Z144SN005 is a ST7735S-based LCD organized as 128RGB×128; it has 384 sources and 128 gates. I took some microphotographs of it using an Amscope ME300TZ-2L-3M metallurgical microscope.&lt;/p&gt;

&lt;p&gt;The following microphotographs of the front glass plate that contains color filters demonstrate the pixels lighting up:&lt;/p&gt;

&lt;p&gt;&lt;a class="fancybox" rel="gal-front" href="/images/z144sn005-display/filters-trans-4x.png" title="4x magnification, transmitted light"&gt;&lt;img src="/images/z144sn005-display/filters-trans-4x-thumb.png" title="4x magnification, transmitted light"&gt;&lt;/a&gt;
&lt;a class="fancybox" rel="gal-front" href="/images/z144sn005-display/filters-refl-4x.png" title="4x magnification, reflected light"&gt;&lt;img src="/images/z144sn005-display/filters-refl-4x-thumb.png" title="4x magnification, reflected light"&gt;&lt;/a&gt;
&lt;a class="fancybox" rel="gal-front" href="/images/z144sn005-display/filters-trans-refl-4x.png" title="4x magnification, reflected and transmitted light"&gt;&lt;img src="/images/z144sn005-display/filters-trans-refl-4x-thumb.png" title="4x magnification, reflected and transmitted light"&gt;&lt;/a&gt;
&lt;a class="fancybox" rel="gal-front" href="/images/z144sn005-display/filters-refl-10x.png" title="10x magnification, reflected light"&gt;&lt;img src="/images/z144sn005-display/filters-refl-10x-thumb.png" title="10x magnification, reflected light"&gt;&lt;/a&gt;
&lt;a class="fancybox" rel="gal-front" href="/images/z144sn005-display/filters-trans-refl-10x.png" title="10x magnification, reflected and transmitted light"&gt;&lt;img src="/images/z144sn005-display/filters-trans-refl-10x-thumb.png" title="10x magnification, reflected and transmitted light"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The following microphotographs (all taken in combined transmitted and reflected light for extra contrast) of the back glass plate show the circuitry driving the liquid crystals confined between the two glass plates.&lt;/p&gt;

&lt;p&gt;First, row (gate) drivers. There’s 128 in total. Note the numbered LCD rows.&lt;/p&gt;

&lt;p&gt;&lt;a class="fancybox" rel="gal-back-rows" href="/images/z144sn005-display/drivers-row-4x.png" title="4x magnification, row drivers"&gt;&lt;img src="/images/z144sn005-display/drivers-row-4x-thumb.png" title="4x magnification, row drivers"&gt;&lt;/a&gt;
&lt;a class="fancybox" rel="gal-back-rows" href="/images/z144sn005-display/drivers-row-10x.png" title="10x magnification, row drivers"&gt;&lt;img src="/images/z144sn005-display/drivers-row-10x-thumb.png" title="10x magnification, row drivers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Second, column (source) drivers. There’s 384 in total, so the routing is far more dense. Note that the column drivers are located at the side of the display &lt;em&gt;far&lt;/em&gt; from the controller, likely because of lack of space. Note the thick power distribution traces.&lt;/p&gt;

&lt;p&gt;&lt;a class="fancybox" rel="gal-back-columns" href="/images/z144sn005-display/drivers-col-1-4x.png" title="4x magnification, column structures in bottom right corner"&gt;&lt;img src="/images/z144sn005-display/drivers-col-1-4x-thumb.png" title="4x magnification, column structures in bottom right corner"&gt;&lt;/a&gt;
&lt;a class="fancybox" rel="gal-back-columns" href="/images/z144sn005-display/drivers-col-1-10x.png" title="10x magnification, column structures in bottom right corner"&gt;&lt;img src="/images/z144sn005-display/drivers-col-1-10x-thumb.png" title="10x magnification, column structures in bottom right corner"&gt;&lt;/a&gt;
&lt;a class="fancybox" rel="gal-back-columns" href="/images/z144sn005-display/drivers-col-2-10x.png" title="10x magnification, column structures in bottom center-right"&gt;&lt;img src="/images/z144sn005-display/drivers-col-2-10x-thumb.png" title="10x magnification, column structures in bottom center-right"&gt;&lt;/a&gt;
&lt;a class="fancybox" rel="gal-back-columns" href="/images/z144sn005-display/drivers-col-3-10x.png" title="10x magnification, column structures in bottom center"&gt;&lt;img src="/images/z144sn005-display/drivers-col-3-10x-thumb.png" title="10x magnification, column structures in bottom center"&gt;&lt;/a&gt;
&lt;a class="fancybox" rel="gal-back-columns" href="/images/z144sn005-display/drivers-col-4-10x.png" title="10x magnification, column structures in bottom left corner"&gt;&lt;img src="/images/z144sn005-display/drivers-col-4-10x-thumb.png" title="10x magnification, column structures in bottom left corner"&gt;&lt;/a&gt;
&lt;a class="fancybox" rel="gal-back-columns" href="/images/z144sn005-display/drivers-col-5-10x.png" title="10x magnification, column structures in top left corner"&gt;&lt;img src="/images/z144sn005-display/drivers-col-5-10x-thumb.png" title="10x magnification, column structures in top left corner"&gt;&lt;/a&gt;
&lt;a class="fancybox" rel="gal-back-columns" href="/images/z144sn005-display/drivers-col-6-4x.png" title="4x magnification, column structures in top right corner"&gt;&lt;img src="/images/z144sn005-display/drivers-col-6-4x-thumb.png" title="4x magnification, column structures in top right corner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At last, here’s a magnified shot of one of the cracks in the glass that killed the LCD:&lt;/p&gt;

&lt;p&gt;&lt;a class="fancybox" href="/images/z144sn005-display/crack-10x.png" title="10x magnification, glass crack"&gt;&lt;img src="/images/z144sn005-display/crack-10x-thumb.png" title="10x magnification, glass crack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The cleanest pictures were taken by wetting a cotton bud with IPA, then swabbing the glass with the cotton bud such as to leave a thin film but also remove all junk somewhere out of the visual field, and photographing while the field has not evaporated. IPA appears to be nearly index-matched with the glass used in this LCD, and so it hides most if not all imperfections in the glass, apart from any cleaning that may happen as a result of this procedure.&lt;/p&gt;
</content>
    <summary type="html">&lt;p&gt;I’ve been provided a Z144SN005 LCD that has split in halves as a result of excess mechanical force. Z144SN005 is a ST7735S-based LCD organized as 128RGB×128; it has 384 sources and 128 gates. I took some microphotographs of it using an Amscope ME300TZ-2L-3M metallurgical microscope.&lt;/p&gt;

&lt;p&gt;The following microphotographs of the front glass plate that contains color filters demonstrate the pixels lighting up:&lt;/p&gt;

&lt;p&gt;&lt;a class="fancybox" rel="gal-front" href="/images/z144sn005-display/filters-trans-4x.png" title="4x magnification, transmitted light"&gt;&lt;img src="/images/z144sn005-display/filters-trans-4x-thumb.png" title="4x magnification, transmitted light"&gt;&lt;/a&gt;
&lt;a class="fancybox" rel="gal-front" href="/images/z144sn005-display/filters-refl-4x.png" title="4x magnification, reflected light"&gt;&lt;img src="/images/z144sn005-display/filters-refl-4x-thumb.png" title="4x magnification, reflected light"&gt;&lt;/a&gt;
&lt;a class="fancybox" rel="gal-front" href="/images/z144sn005-display/filters-trans-refl-4x.png" title="4x magnification, reflected and transmitted light"&gt;&lt;img src="/images/z144sn005-display/filters-trans-refl-4x-thumb.png" title="4x magnification, reflected and transmitted light"&gt;&lt;/a&gt;
&lt;a class="fancybox" rel="gal-front" href="/images/z144sn005-display/filters-refl-10x.png" title="10x magnification, reflected light"&gt;&lt;img src="/images/z144sn005-display/filters-refl-10x-thumb.png" title="10x magnification, reflected light"&gt;&lt;/a&gt;
&lt;a class="fancybox" rel="gal-front" href="/images/z144sn005-display/filters-trans-refl-10x.png" title="10x magnification, reflected and transmitted light"&gt;&lt;img src="/images/z144sn005-display/filters-trans-refl-10x-thumb.png" title="10x magnification, reflected and transmitted light"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The following microphotographs (all taken in combined transmitted and reflected light for extra contrast) of the back glass plate show the circuitry driving the liquid crystals confined between the two glass plates.&lt;/p&gt;

&lt;p&gt;First, row (gate) drivers. There’s 128 in total. Note the numbered LCD rows.&lt;/p&gt;

&lt;p&gt;&lt;a class="fancybox" rel="gal-back-rows" href="/images/z144sn005-display/drivers-row-4x.png" title="4x magnification, row drivers"&gt;&lt;img src="/images/z144sn005-display/drivers-row-4x-thumb.png" title="4x magnification, row drivers"&gt;&lt;/a&gt;
&lt;a class="fancybox" rel="gal-back-rows" href="/images/z144sn005-display/drivers-row-10x.png" title="10x magnification, row drivers"&gt;&lt;img src="/images/z144sn005-display/drivers-row-10x-thumb.png" title="10x magnification, row drivers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Second, column (source) drivers. There’s 384 in total, so the routing is far more dense. Note that the column drivers are located at the side of the display &lt;em&gt;far&lt;/em&gt; from the controller, likely because of lack of space. Note the thick power distribution traces.&lt;/p&gt;

&lt;p&gt;&lt;a class="fancybox" rel="gal-back-columns" href="/images/z144sn005-display/drivers-col-1-4x.png" title="4x magnification, column structures in bottom right corner"&gt;&lt;img src="/images/z144sn005-display/drivers-col-1-4x-thumb.png" title="4x magnification, column structures in bottom right corner"&gt;&lt;/a&gt;
&lt;a class="fancybox" rel="gal-back-columns" href="/images/z144sn005-display/drivers-col-1-10x.png" title="10x magnification, column structures in bottom right corner"&gt;&lt;img src="/images/z144sn005-display/drivers-col-1-10x-thumb.png" title="10x magnification, column structures in bottom right corner"&gt;&lt;/a&gt;
&lt;a class="fancybox" rel="gal-back-columns" href="/images/z144sn005-display/drivers-col-2-10x.png" title="10x magnification, column structures in bottom center-right"&gt;&lt;img src="/images/z144sn005-display/drivers-col-2-10x-thumb.png" title="10x magnification, column structures in bottom center-right"&gt;&lt;/a&gt;
&lt;a class="fancybox" rel="gal-back-columns" href="/images/z144sn005-display/drivers-col-3-10x.png" title="10x magnification, column structures in bottom center"&gt;&lt;img src="/images/z144sn005-display/drivers-col-3-10x-thumb.png" title="10x magnification, column structures in bottom center"&gt;&lt;/a&gt;
&lt;a class="fancybox" rel="gal-back-columns" href="/images/z144sn005-display/drivers-col-4-10x.png" title="10x magnification, column structures in bottom left corner"&gt;&lt;img src="/images/z144sn005-display/drivers-col-4-10x-thumb.png" title="10x magnification, column structures in bottom left corner"&gt;&lt;/a&gt;
&lt;a class="fancybox" rel="gal-back-columns" href="/images/z144sn005-display/drivers-col-5-10x.png" title="10x magnification, column structures in top left corner"&gt;&lt;img src="/images/z144sn005-display/drivers-col-5-10x-thumb.png" title="10x magnification, column structures in top left corner"&gt;&lt;/a&gt;
&lt;a class="fancybox" rel="gal-back-columns" href="/images/z144sn005-display/drivers-col-6-4x.png" title="4x magnification, column structures in top right corner"&gt;&lt;img src="/images/z144sn005-display/drivers-col-6-4x-thumb.png" title="4x magnification, column structures in top right corner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At last, here’s a magnified shot of one of the cracks in the glass that killed the LCD:&lt;/p&gt;

&lt;p&gt;&lt;a class="fancybox" href="/images/z144sn005-display/crack-10x.png" title="10x magnification, glass crack"&gt;&lt;img src="/images/z144sn005-display/crack-10x-thumb.png" title="10x magnification, glass crack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The cleanest pictures were taken by wetting a cotton bud with IPA, then swabbing the glass with the cotton bud such as to leave a thin film but also remove all junk somewhere out of the visual field, and photographing while the field has not evaporated. IPA appears to be nearly index-matched with the glass used in this LCD, and so it hides most if not all imperfections in the glass, apart from any cleaning that may happen as a result of this procedure.&lt;/p&gt;
</summary>
  </entry>
  <entry>
    <id>tag:lab.whitequark.org,2018-08-02:/notes/2018-08-02/nokia-3220-transflective-lcd-microphotography/</id>
    <title type="html">Nokia 3220 transflective LCD microphotography</title>
    <published>2018-08-02T01:56:23Z</published>
    <updated>2018-08-02T01:56:23Z</updated>
    <link rel="alternate" href="https://lab.whitequark.org/notes/2018-08-02/nokia-3220-transflective-lcd-microphotography/" type="text/html"/>
    <content type="html">&lt;p&gt;I took some microphotographs of a Nokia 3220 (RH-37) transflective LCD using an Amscope ME300TZ-2L-3M metallurgical microscope. These microphotographs were taken on an intact LCD, i.e. transmitted light images were acquired by shining a flashlight through the entire LCD stackup (the built-in diascopic light source is not powerful enough); the 90° reflected light images were acquired using the built-in episcopic light sources, and the 45° reflected light images were acquired using a similar flashlight.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/nokia-3220-display/reflected-90deg.png" alt="reflected light incident at 90°"&gt;
&lt;img src="/images/nokia-3220-display/reflected-90deg-45deg.png" alt="reflected light incident at 90° and 45°"&gt;
&lt;img src="/images/nokia-3220-display/transmitted.png" alt="transmitted light"&gt;
&lt;img src="/images/nokia-3220-display/combined.png" alt="transmitted light and reflected light incident at 90° and 45°"&gt;
&lt;img src="/images/nokia-3220-display/magnified.png" alt="transmitted light and reflected light incident at 90°, at larger magnification"&gt;&lt;/p&gt;
</content>
    <summary type="html">&lt;p&gt;I took some microphotographs of a Nokia 3220 (RH-37) transflective LCD using an Amscope ME300TZ-2L-3M metallurgical microscope. These microphotographs were taken on an intact LCD, i.e. transmitted light images were acquired by shining a flashlight through the entire LCD stackup (the built-in diascopic light source is not powerful enough); the 90° reflected light images were acquired using the built-in episcopic light sources, and the 45° reflected light images were acquired using a similar flashlight.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/nokia-3220-display/reflected-90deg.png" alt="reflected light incident at 90°"&gt;
&lt;img src="/images/nokia-3220-display/reflected-90deg-45deg.png" alt="reflected light incident at 90° and 45°"&gt;
&lt;img src="/images/nokia-3220-display/transmitted.png" alt="transmitted light"&gt;
&lt;img src="/images/nokia-3220-display/combined.png" alt="transmitted light and reflected light incident at 90° and 45°"&gt;
&lt;img src="/images/nokia-3220-display/magnified.png" alt="transmitted light and reflected light incident at 90°, at larger magnification"&gt;&lt;/p&gt;
</summary>
  </entry>
  <entry>
    <id>tag:lab.whitequark.org,2018-08-02:/notes/2018-08-02/sony-xperia-z2-lcd-microphotography/</id>
    <title type="html">Sony Xperia Z2 LCD microphotography</title>
    <published>2018-08-02T00:33:42Z</published>
    <updated>2018-08-02T00:33:42Z</updated>
    <link rel="alternate" href="https://lab.whitequark.org/notes/2018-08-02/sony-xperia-z2-lcd-microphotography/" type="text/html"/>
    <content type="html">&lt;p&gt;I took some microphotographs of a counterfeit Sony Xperia Z2 LCD display, bought on Taobao circa 2017, using an Amscope ME300TZ-2L-3M metallurgical microscope. (This display would not initialize with an unmodified firmware, and was factory-programmed to match the never used, due to a bug, DeviceTree display configuration present in the Xperia Z2 kernel image.)&lt;/p&gt;

&lt;p&gt;The combined light photo is not digitally manipulated; this is just how it looks with both episcopic and diascopic light sources on.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/xperia-z2-display/reflected.png" alt="reflected light"&gt;
&lt;img src="/images/xperia-z2-display/transmitted.png" alt="transmitted light"&gt;
&lt;img src="/images/xperia-z2-display/combined.png" alt="combined light"&gt;&lt;/p&gt;
</content>
    <summary type="html">&lt;p&gt;I took some microphotographs of a counterfeit Sony Xperia Z2 LCD display, bought on Taobao circa 2017, using an Amscope ME300TZ-2L-3M metallurgical microscope. (This display would not initialize with an unmodified firmware, and was factory-programmed to match the never used, due to a bug, DeviceTree display configuration present in the Xperia Z2 kernel image.)&lt;/p&gt;

&lt;p&gt;The combined light photo is not digitally manipulated; this is just how it looks with both episcopic and diascopic light sources on.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/xperia-z2-display/reflected.png" alt="reflected light"&gt;
&lt;img src="/images/xperia-z2-display/transmitted.png" alt="transmitted light"&gt;
&lt;img src="/images/xperia-z2-display/combined.png" alt="combined light"&gt;&lt;/p&gt;
</summary>
  </entry>
  <entry>
    <id>tag:lab.whitequark.org,2018-08-02:/notes/2018-08-02/replacing-the-mirror-on-an-amscope-me300tz/</id>
    <title type="html">Replacing the mirror on an Amscope ME300TZ</title>
    <published>2018-08-02T00:23:21Z</published>
    <updated>2018-08-02T00:23:21Z</updated>
    <link rel="alternate" href="https://lab.whitequark.org/notes/2018-08-02/replacing-the-mirror-on-an-amscope-me300tz/" type="text/html"/>
    <content type="html">&lt;p&gt;I have an Amscope ME300TZ-2L-3M metallurgical microscope. While investigating possible causes for poor picture quality and cleaning the optics, I discovered that the mirror was not appropriately fixed to its mount and, in fact, fell off. I glued it back with cyanoacrylate.&lt;/p&gt;

&lt;p&gt;After that, I’ve realized that I have a box with a disassembled Pentax *ist DS2 camera, so I’ve removed the mirror from the mirror assembly, heated it at approx. 180 °C to soften the rubber (apparently silicone) glue attaching it to the mirror mount, scraped off the glue with a fingernail, and attached it to the microscope mirror mount. For that I had to, first, remove the original mirror using a heat gun at approx. 280 °C, which made the cyanoacrylate viscoelastic but (predictably) broke the mirror in the process, and second, file down one part of the mirror mount, as while the Pentax mirror is nearly identical in dimensions to the original mirror, it is slightly wider and slightly shorter.&lt;/p&gt;

&lt;p&gt;The new mirror performs slightly better than the old one, with a small but noticeable reduction in glare, likely due to the different coating. The overall function of the microscope is not significantly affected.&lt;/p&gt;
</content>
    <summary type="html">&lt;p&gt;I have an Amscope ME300TZ-2L-3M metallurgical microscope. While investigating possible causes for poor picture quality and cleaning the optics, I discovered that the mirror was not appropriately fixed to its mount and, in fact, fell off. I glued it back with cyanoacrylate.&lt;/p&gt;

&lt;p&gt;After that, I’ve realized that I have a box with a disassembled Pentax *ist DS2 camera, so I’ve removed the mirror from the mirror assembly, heated it at approx. 180 °C to soften the rubber (apparently silicone) glue attaching it to the mirror mount, scraped off the glue with a fingernail, and attached it to the microscope mirror mount. For that I had to, first, remove the original mirror using a heat gun at approx. 280 °C, which made the cyanoacrylate viscoelastic but (predictably) broke the mirror in the process, and second, file down one part of the mirror mount, as while the Pentax mirror is nearly identical in dimensions to the original mirror, it is slightly wider and slightly shorter.&lt;/p&gt;

&lt;p&gt;The new mirror performs slightly better than the old one, with a small but noticeable reduction in glare, likely due to the different coating. The overall function of the microscope is not significantly affected.&lt;/p&gt;
</summary>
  </entry>
</feed>

